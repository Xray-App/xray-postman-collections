{
	"info": {
		"_postman_id": "90abc761-2d77-489f-9112-1ff507584e6e",
		"name": "Xray REST API v2.0",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "setup",
			"item": [
				{
					"name": "get project id",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "62e496c2-45fa-460d-8e50-326e6230b5a3",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Project returned\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.key).to.not.be.empty;",
									"    pm.collectionVariables.set(\"PROJECT_ID\", jsonData.id);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{JIRA_BASEURL}}/rest/api/2/project/{{PROJECT_KEY}}",
							"host": [
								"{{JIRA_BASEURL}}"
							],
							"path": [
								"rest",
								"api",
								"2",
								"project",
								"{{PROJECT_KEY}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "get Xray custom fields",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "722bc2f1-d263-4875-8490-7faf8229d867",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"custom fields returned\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.lengthOf.at.least(1);",
									"",
									"    for (var i = 0;i<jsonData.length;i++) {",
									"        var cf = jsonData[i];",
									"        // ((cf.name == \"Test Type\") || (cf.schema.custom == \"com.xpandit.plugins.xray:test-type-custom-field\")) ",
									"        if (cf.name == \"Test Type\") {",
									"            pm.collectionVariables.set(\"CF_Test_Type\", cf.id);",
									"        } else if (cf.name == \"Pre-Condition Type\") {",
									"            pm.collectionVariables.set(\"CF_Precondition_Type\", cf.id);",
									"        } else if (cf.name == \"Cucumber Scenario\") {",
									"            pm.collectionVariables.set(\"CF_Cucumber_Scenario\", cf.id);",
									"        } else if (cf.name == \"Cucumber Test Type\") {",
									"            pm.collectionVariables.set(\"CF_Cucumber_Test_Type\", cf.id);",
									"        } else if (cf.name == \"Manual Test Steps\") {",
									"            pm.collectionVariables.set(\"CF_Manual_Test_Steps\", cf.id);",
									"        } else if (cf.name == \"Generic Test Definition\") {",
									"            pm.collectionVariables.set(\"CF_Generic_Definition\", cf.id);",
									"        } else if (cf.name == \"Test Environments\") {",
									"            pm.collectionVariables.set(\"CF_Test_Environments\", cf.id);",
									"        } else if (cf.name == \"Test Repository Path\") {",
									"            pm.collectionVariables.set(\"CF_Test_Repository_Path\", cf.id);",
									"        }",
									"",
									"    }",
									"",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{JIRA_BASEURL}}/rest/api/2/field",
							"host": [
								"{{JIRA_BASEURL}}"
							],
							"path": [
								"rest",
								"api",
								"2",
								"field"
							]
						}
					},
					"response": []
				},
				{
					"name": "create user story S1",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b3797b4d-4118-4450-98a4-f273638014b4",
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Story created\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.key).to.not.be.empty;",
									"    pm.collectionVariables.set(\"S1_KEY\", jsonData.key);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{JIRA_PASSWORD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{JIRA_USERNAME}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n   \"fields\": {\n       \"project\":\n       {\n          \"key\": \"{{PROJECT_KEY}}\"\n       },\n       \"summary\": \"S1\",\n       \"description\": \"S1: example of a user storu\",\n       \"issuetype\": {\n          \"name\": \"{{STORY_ISSUETYPE_NAME}}\"\n       }\n   }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{JIRA_BASEURL}}/rest/api/2/issue",
							"host": [
								"{{JIRA_BASEURL}}"
							],
							"path": [
								"rest",
								"api",
								"2",
								"issue"
							]
						}
					},
					"response": []
				},
				{
					"name": "create defect D1",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "0aa30d51-1621-4ca3-9ff4-e4735edfecf7",
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Bug created\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.key).to.not.be.empty;",
									"    pm.collectionVariables.set(\"D1_KEY\", jsonData.key);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{JIRA_PASSWORD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{JIRA_USERNAME}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n   \"fields\": {\n       \"project\":\n       {\n          \"key\": \"{{PROJECT_KEY}}\"\n       },\n       \"summary\": \"D1\",\n       \"description\": \"D1: example of a udefect\",\n       \"issuetype\": {\n          \"name\": \"{{BUG_ISSUETYPE_NAME}}\"\n       }\n   }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{JIRA_BASEURL}}/rest/api/2/issue",
							"host": [
								"{{JIRA_BASEURL}}"
							],
							"path": [
								"rest",
								"api",
								"2",
								"issue"
							]
						}
					},
					"response": []
				},
				{
					"name": "create folder \"Postman F1\" in Test Repository",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "7bf8bfb2-f54b-43dd-8455-a9935341d3ac",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Folder created\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.id).not.eq(undefined);",
									"    pm.collectionVariables.set(\"F1_ID\", jsonData.id);",
									"    pm.collectionVariables.set(\"F1_PATH\", \"/\" + jsonData.name);",
									"    pm.collectionVariables.set(\"F1_NAME\", jsonData.name);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{JIRA_PASSWORD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{JIRA_USERNAME}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"Postman F1\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{JIRA_BASEURL}}/rest/raven/1.0/api/testrepository/{{PROJECT_KEY}}/folders/-1",
							"host": [
								"{{JIRA_BASEURL}}"
							],
							"path": [
								"rest",
								"raven",
								"1.0",
								"api",
								"testrepository",
								"{{PROJECT_KEY}}",
								"folders",
								"-1"
							]
						}
					},
					"response": []
				},
				{
					"name": "create folder \"Postman F2\" in Test Repository",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b2f86255-6dcc-4327-aaac-cc5c2f7deaa0",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Folder created\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.id).not.eq(undefined);",
									"    pm.collectionVariables.set(\"F2_ID\", jsonData.id);",
									"    pm.collectionVariables.set(\"F2_PATH\", \"/\" + jsonData.name);",
									"    pm.collectionVariables.set(\"F2_NAME\", jsonData.name);",
									"});",
									"",
									"//if (pm.collectionVariables.get(\"XRAY_VERSION_MAJOR\") == \"4\") {",
									"//    postman.setNextRequest(\"create manual test T1 - Xray v4.x\")",
									"//}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{JIRA_PASSWORD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{JIRA_USERNAME}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"Postman F2\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{JIRA_BASEURL}}/rest/raven/1.0/api/testrepository/{{PROJECT_KEY}}/folders/-1",
							"host": [
								"{{JIRA_BASEURL}}"
							],
							"path": [
								"rest",
								"raven",
								"1.0",
								"api",
								"testrepository",
								"{{PROJECT_KEY}}",
								"folders",
								"-1"
							]
						}
					},
					"response": []
				},
				{
					"name": "create manual test T1 - Xray v4.x",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "34a9817e-6cff-4975-8bbc-2c998a1f1235",
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Test created\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.key).to.not.be.empty;",
									"    pm.collectionVariables.set(\"T1_KEY\", jsonData.key);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{JIRA_PASSWORD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{JIRA_USERNAME}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n   \"fields\": {\n       \"project\":\n       {\n          \"key\": \"{{PROJECT_KEY}}\"\n       },\n       \"summary\": \"T1\",\n       \"description\": \"T1: example of manual test\",\n       \"issuetype\": {\n          \"name\": \"{{TEST_ISSUETYPE_NAME}}\"\n       },\n       \"{{CF_Test_Repository_Path}}\": \"{{F1_PATH}}\",\n       \"{{CF_Test_Type}}\": { \"value\": \"Manual\" },\n       \"{{CF_Manual_Test_Steps}}\": {\n            \"steps\": [\n\t\t\t\t{\n                    \"index\": 1,\n                    \"fields\": {\n                        \"Action\": \"Step 1\",\n                        \"Data\": \"input Data 1\",\n                        \"Expected Result\": \"Excepted result 1\"\n                    }\n                },\n                 {\n                    \"index\": 2,\n                    \"fields\": {\n                        \"Action\": \"Step 2\",\n                        \"Data\": \"input Data 2\",\n                        \"Expected Result\": \"Excepted result 2\"\n                    }\n                },\n                 {\n                    \"index\": 3,\n                    \"fields\": {\n                        \"Action\": \"Step 3\",\n                        \"Data\": \"input Data 3\",\n                        \"Expected Result\": \"Excepted result 3\"\n                    }\n                },\n                 {\n                    \"index\": 4,\n                    \"fields\": {\n                        \"Action\": \"Step 4\",\n                        \"Data\": \"input Data 4\",\n                        \"Expected Result\": \"Excepted result 4\"\n                    }\n                }\n            ]\n        }\n   }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{JIRA_BASEURL}}/rest/api/2/issue",
							"host": [
								"{{JIRA_BASEURL}}"
							],
							"path": [
								"rest",
								"api",
								"2",
								"issue"
							]
						}
					},
					"response": []
				},
				{
					"name": "create manual test T4 - Xray v4.x",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "466c896e-0c48-4ac4-9b8e-4e1f8091aaeb",
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Test created\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.key).to.not.be.empty;",
									"    pm.collectionVariables.set(\"T4_KEY\", jsonData.key);",
									"});",
									"",
									"postman.setNextRequest(\"create cucumber test T2\")"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{JIRA_PASSWORD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{JIRA_USERNAME}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n   \"fields\": {\n       \"project\":\n       {\n          \"key\": \"{{PROJECT_KEY}}\"\n       },\n       \"summary\": \"T4\",\n       \"description\": \"T4: example of manual test\",\n       \"issuetype\": {\n          \"name\": \"{{TEST_ISSUETYPE_NAME}}\"\n       },\n       \"{{CF_Test_Repository_Path}}\": \"{{F1_PATH}}\",\n       \"{{CF_Test_Type}}\": { \"value\": \"Manual\" },\n       \"{{CF_Manual_Test_Steps}}\": {\n            \"steps\": [\n\t\t\t\t{\n                    \"index\": 1,\n                    \"fields\": {\n                        \"Action\": \"Step 1\",\n                        \"Data\": \"input Data 1\",\n                        \"Expected Result\": \"Excepted result 1\"\n                    }\n                },\n                 {\n                    \"index\": 2,\n                    \"fields\": {\n                        \"Action\": \"Step 2\",\n                        \"Data\": \"input Data 2\",\n                        \"Expected Result\": \"Excepted result 2\"\n                    }\n                },\n                 {\n                    \"index\": 3,\n                    \"fields\": {\n                        \"Action\": \"Step 3\",\n                        \"Data\": \"input Data 3\",\n                        \"Expected Result\": \"Excepted result 3\"\n                    }\n                },\n                 {\n                    \"index\": 4,\n                    \"fields\": {\n                        \"Action\": \"Step 4\",\n                        \"Data\": \"input Data 4\",\n                        \"Expected Result\": \"Excepted result 4\"\n                    }\n                }\n            ]\n        }\n   }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{JIRA_BASEURL}}/rest/api/2/issue",
							"host": [
								"{{JIRA_BASEURL}}"
							],
							"path": [
								"rest",
								"api",
								"2",
								"issue"
							]
						}
					},
					"response": []
				},
				{
					"name": "create cucumber test T2",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "30c77cdd-4712-4d24-a8ae-7131bb8e5780",
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Test created\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.key).to.not.be.empty;",
									"    pm.collectionVariables.set(\"T2_KEY\", jsonData.key);",
									"});",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{JIRA_PASSWORD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{JIRA_USERNAME}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "\n{\n    \"fields\": {\n       \"project\":\n       {\n          \"key\": \"{{PROJECT_KEY}}\"\n       },\n       \"summary\": \"Sum of two numbers\",\n       \"description\": \"example of cucumber automated test - Scenario Outline\",\n       \"issuetype\": {\n          \"name\": \"Test\"\n       },\n       \"{{CF_Test_Repository_Path}}\": \"{{F1_PATH}}\",\n       \"{{CF_Test_Type}}\": { \"value\": \"Cucumber\" },\n       \"{{CF_Cucumber_Test_Type}}\": { \"value\": \"Scenario Outline\" },\n       \"{{CF_Cucumber_Scenario}}\": \"Given I have entered <input_1> into the calculator\\nAnd I have entered <input_2> into the calculator\\nWhen I press <button>\\nThen the result should be <output> on the screen\\n\\n  Examples:\\n    | input_1 | input_2 | button | output |\\n    | 20      | 30      | add    | 50     |\\n    | 2       | 5       | add    | 7      |\" \n   \n   }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{JIRA_BASEURL}}/rest/api/2/issue",
							"host": [
								"{{JIRA_BASEURL}}"
							],
							"path": [
								"rest",
								"api",
								"2",
								"issue"
							]
						}
					},
					"response": []
				},
				{
					"name": "create generic test T3",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "033dae2c-23d9-499a-8e40-64c3c5914cfe",
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Test created\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.key).to.not.be.empty;",
									"    pm.collectionVariables.set(\"T3_KEY\", jsonData.key);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{JIRA_PASSWORD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{JIRA_USERNAME}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n   \"fields\": {\n       \"project\":\n       {\n          \"key\": \"{{PROJECT_KEY}}\"\n       },\n       \"summary\": \"T3\",\n       \"description\": \"T3: example of generic test\",\n       \"issuetype\": {\n          \"name\": \"{{TEST_ISSUETYPE_NAME}}\"\n       },\n       \"{{CF_Test_Repository_Path}}\": \"{{F1_PATH}}\",\n       \"{{CF_Test_Type}}\": { \"value\": \"Generic\" },\n       \"{{CF_Generic_Definition}}\": \"sum_script.sh\"        \n   }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{JIRA_BASEURL}}/rest/api/2/issue",
							"host": [
								"{{JIRA_BASEURL}}"
							],
							"path": [
								"rest",
								"api",
								"2",
								"issue"
							]
						}
					},
					"response": []
				},
				{
					"name": "create manual precondition P1",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "7f749f6a-e3c4-446f-8534-6d44821d76f3",
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Precondition created\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.key).to.not.be.empty;",
									"    pm.collectionVariables.set(\"P1_KEY\", jsonData.key);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{JIRA_PASSWORD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{JIRA_USERNAME}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n   \"fields\": {\n       \"project\":\n       {\n          \"key\": \"{{PROJECT_KEY}}\"\n       },\n       \"summary\": \"P1\",\n       \"description\": \"P1: example of precondition\",\n       \"issuetype\": {\n          \"name\": \"{{PRECONDITION_ISSUETYPE_NAME}}\"\n       },\n       \"{{CF_Precondition_Type}}\": { \"value\": \"Manual\" }\n   }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{JIRA_BASEURL}}/rest/api/2/issue",
							"host": [
								"{{JIRA_BASEURL}}"
							],
							"path": [
								"rest",
								"api",
								"2",
								"issue"
							]
						}
					},
					"response": []
				},
				{
					"name": "create test set TS1",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a8d569e2-ddf2-4076-9c12-113b5a070098",
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Test Set created\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.key).to.not.be.empty;",
									"    pm.collectionVariables.set(\"TS1_KEY\", jsonData.key);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{JIRA_PASSWORD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{JIRA_USERNAME}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n   \"fields\": {\n       \"project\":\n       {\n          \"key\": \"{{PROJECT_KEY}}\"\n       },\n       \"summary\": \"TS1\",\n       \"description\": \"TS1: example of test set\",\n       \"issuetype\": {\n          \"name\": \"{{TESTSET_ISSUETYPE_NAME}}\"\n       }     \n   }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{JIRA_BASEURL}}/rest/api/2/issue",
							"host": [
								"{{JIRA_BASEURL}}"
							],
							"path": [
								"rest",
								"api",
								"2",
								"issue"
							]
						}
					},
					"response": []
				},
				{
					"name": "create test plan TP1",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "431575cf-53f6-4be8-a10c-bff5e1e45391",
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Test Plan created\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.key).to.not.be.empty;",
									"    pm.collectionVariables.set(\"TP1_KEY\", jsonData.key);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{JIRA_PASSWORD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{JIRA_USERNAME}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n   \"fields\": {\n       \"project\":\n       {\n          \"key\": \"{{PROJECT_KEY}}\"\n       },\n       \"summary\": \"TP1\",\n       \"description\": \"TP1: example of test plan\",\n       \"issuetype\": {\n          \"name\": \"{{TESTPLAN_ISSUETYPE_NAME}}\"\n       }     \n   }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{JIRA_BASEURL}}/rest/api/2/issue",
							"host": [
								"{{JIRA_BASEURL}}"
							],
							"path": [
								"rest",
								"api",
								"2",
								"issue"
							]
						}
					},
					"response": []
				},
				{
					"name": "create test execution TE1 with one run per each test",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ed51932a-964e-4d98-9c80-788bcb4d0401",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Test Execution created with 3 runs\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.testExecIssue.key).to.not.be.empty;",
									"    pm.collectionVariables.set(\"TE1_KEY\", jsonData.testExecIssue.key);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{JIRA_PASSWORD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{JIRA_USERNAME}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"info\" : {\n        \"summary\" : \"Execution of automated tests for release\",\n        \"description\" : \"This execution is automatically created when importing execution results from an external source\"\n    },\n    \"tests\" : [\n        {\n            \"testKey\" : \"{{T1_KEY}}\",\n            \"start\" : \"2014-08-30T11:47:35+01:00\",\n            \"finish\" : \"2014-08-30T11:50:56+01:00\",\n            \"comment\" : \"Successful execution\",\n            \"status\" : \"PASS\",\n            \"evidences\" : [\n                {\n                    \"data\": \"ZHVtbXkgY29udGVudA==\",\n                    \"filename\": \"dummy.txt\",\n                    \"contentType\": \"text/plain\"\n                }\n            ],\n\t\t\t\"steps\": [\n                {\n                    \"status\": \"PASS\",\n                    \"comment\": \"Coment on Test Step Result 1\",\n                    \"evidences\" : [\n\t\t                {\n\t\t                    \"data\": \"ZHVtbXkgY29udGVudA==\",\n\t\t                    \"filename\": \"dummy.txt\",\n\t\t                    \"contentType\": \"text/plain\"\n\t\t                }\n\t\t            ]\n                },\n                {\n                    \"status\": \"PASS\",\n                    \"comment\": \"Coment on Test Step Result 2\"\n                },\n                {\n                    \"status\": \"PASS\",\n                    \"comment\": \"Coment on Test Step Result 3\"\n                },\n\t\t\t\t{\n                    \"status\": \"PASS\",\n                    \"comment\": \"Coment on Test Step Result 4\"\n                }\n        \t]\n        },\n        {\n            \"testKey\" : \"{{T2_KEY}}\",\n            \"start\" : \"2014-08-30T11:47:35+01:00\",\n            \"finish\" : \"2014-08-30T11:50:56+01:00\",\n            \"comment\" : \"Successful execution\",\n            \"status\" : \"PASS\"\n        },\n        {\n            \"testKey\" : \"{{T3_KEY}}\",\n            \"start\" : \"2014-08-30T11:47:35+01:00\",\n            \"finish\" : \"2014-08-30T11:50:56+01:00\",\n            \"comment\" : \"Successful execution\",\n            \"status\" : \"PASS\"\n        }\n ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{JIRA_BASEURL}}/rest/raven/1.0/import/execution",
							"host": [
								"{{JIRA_BASEURL}}"
							],
							"path": [
								"rest",
								"raven",
								"1.0",
								"import",
								"execution"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "test",
			"item": [
				{
					"name": "test steps",
					"item": [
						{
							"name": "/test/:testKey/steps",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c619ad5d-3667-4e6c-a005-b0e95894e1d2",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Steps returned\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.steps.length).to.be.gt(3);",
											"    if (jsonData.steps != undefined){",
											"        pm.collectionVariables.set(\"T1_STEP1_ID\", jsonData.steps[0].id)",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{JIRA_BASEURL}}/rest/raven/2.0/api/test/:testKey/steps",
									"host": [
										"{{JIRA_BASEURL}}"
									],
									"path": [
										"rest",
										"raven",
										"2.0",
										"api",
										"test",
										":testKey",
										"steps"
									],
									"variable": [
										{
											"key": "testKey",
											"value": "{{T1_KEY}}",
											"description": "(Required) The key of the test issue, e.g., CALC-562"
										}
									]
								},
								"description": "Returns all the steps of a test issue given the key. The response contains for each step the corresponding id, index, fields and the attachments. <br /> <br /> The Test Step fields are identified by their name and can be of type _Data_ (Toggle, Number, Date and Date Time fields), _Option_ (Single Select, Multiple Select and Radio Button fields), _Wiki_ (Native fields, Single and Multiple Line fields). <br /> <br /> The value of step fields of type _Wiki_ have a raw and rendered value. _Option_ fields value will be an array containing the information of the selected options (the option id and its value)."
							},
							"response": [
								{
									"name": "Internal Server error",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/test/:testKey/steps",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"test",
												":testKey",
												"steps"
											],
											"variable": [
												{
													"key": "testKey"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"error\": \"Internal server exception cause.\"\n}"
								},
								{
									"name": "Successful operation",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/test/:testKey/steps",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"test",
												":testKey",
												"steps"
											],
											"variable": [
												{
													"key": "testKey"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"steps\": [\n  {\n   \"id\": 85778,\n   \"index\": 1,\n   \"fields\": \"occaecat nostrud\",\n   \"attachments\": [\n    {\n     \"id\": 49735294,\n     \"filename\": \"velit\",\n     \"fileIcon\": \"in enim veniam\",\n     \"mimeType\": \"consequat aliquip nisi eu\",\n     \"fileIconAlt\": \"aliqua pariatur dolore mollit\",\n     \"fileSize\": \"veniam fugiat\",\n     \"numericalFileSize\": -18069851,\n     \"created\": \"mollit ea\",\n     \"createdDate\": -69187389,\n     \"author\": \"consequat enim\",\n     \"authorFullName\": \"Ut\",\n     \"fileURL\": \"dolore elit\",\n     \"filePath\": \"laborum ea\"\n    },\n    {\n     \"id\": 64825972,\n     \"filename\": \"amet tempor\",\n     \"fileIcon\": \"aute la\",\n     \"mimeType\": \"enim culpa\",\n     \"fileIconAlt\": \"adipisicin\",\n     \"fileSize\": \"veniam sint\",\n     \"numericalFileSize\": 13597852,\n     \"created\": \"labore ea voluptate occaecat\",\n     \"createdDate\": 93098379,\n     \"author\": \"exercitation et\",\n     \"authorFullName\": \"proident Excepteur\",\n     \"fileURL\": \"sunt in eu\",\n     \"filePath\": \"veniam commodo\"\n    }\n   ]\n  },\n  {\n   \"id\": 85778,\n   \"index\": 1,\n   \"fields\": \"anim laboris commodo\",\n   \"attachments\": [\n    {\n     \"id\": 22324144,\n     \"filename\": \"est in\",\n     \"fileIcon\": \"incididun\",\n     \"mimeType\": \"Ut incididunt laboris\",\n     \"fileIconAlt\": \"est Lorem i\",\n     \"fileSize\": \"reprehenderit deserunt\",\n     \"numericalFileSize\": 2281358,\n     \"created\": \"commodo consequat esse\",\n     \"createdDate\": 34417472,\n     \"author\": \"consequat nostrud irure occaecat\",\n     \"authorFullName\": \"ipsum nisi et\",\n     \"fileURL\": \"cillum cupidatat ad enim\",\n     \"filePath\": \"minim eu\"\n    },\n    {\n     \"id\": 62145927,\n     \"filename\": \"dolor veniam s\",\n     \"fileIcon\": \"occaecat amet\",\n     \"mimeType\": \"qui quis\",\n     \"fileIconAlt\": \"enim et irure tempor\",\n     \"fileSize\": \"voluptate consectetur veniam\",\n     \"numericalFileSize\": -25381845,\n     \"created\": \"irure ex\",\n     \"createdDate\": 78763759,\n     \"author\": \"nisi velit labore\",\n     \"authorFullName\": \"laborum non mollit ut enim\",\n     \"fileURL\": \"est dolor\",\n     \"filePath\": \"Excepteur quis cupidatat elit\"\n    }\n   ]\n  }\n ]\n}"
								},
								{
									"name": "Bad Request. Occurs when there is some error in the request, for instance, the test with provided key does not exist or some field has an invalid value (e.g. Option \"A\" does not exist for an option field).",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/test/:testKey/steps",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"test",
												":testKey",
												"steps"
											],
											"variable": [
												{
													"key": "testKey"
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"error\": \"Test with key CALC-123 not found or is not a Manual Test.\"\n}"
								}
							]
						},
						{
							"name": "/test/:testKey/steps/:stepId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b2e73adc-cf69-4463-ad51-1bedf083c732",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"data returned\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.not.be.empty;",
											"});",
											"",
											"pm.test(\"step details returned\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.step.id).to.eq(pm.collectionVariables.get(\"T1_STEP1_ID\"));",
											"    pm.expect(jsonData.step.index).to.eq(1);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{JIRA_BASEURL}}/rest/raven/2.0/api/test/:testKey/steps/:stepId",
									"host": [
										"{{JIRA_BASEURL}}"
									],
									"path": [
										"rest",
										"raven",
										"2.0",
										"api",
										"test",
										":testKey",
										"steps",
										":stepId"
									],
									"variable": [
										{
											"key": "testKey",
											"value": "{{T1_KEY}}",
											"description": "(Required) The key of the test issue, e.g., CALC-562"
										},
										{
											"key": "stepId",
											"value": "{{T1_STEP1_ID}}",
											"description": "(Required) The id of the test step"
										}
									]
								},
								"description": "Returns the values of a single test step, given the test key and the step id. The response follows the same format as the previous endpoints, containing the step id, index, fields and the attachments. <br /> <br /> The Test Step fields are identified by their name and can be of type _Data_ (Toggle, Number, Date and Date Time fields), _Option_ (Single Select, Multiple Select and Radio Button fields), _Wiki_ (Native fields, Single and Multiple Line fields). <br /> <br /> The value of step fields of type _Wiki_ have a raw and rendered value. _Option_ fields value will be an array containing the information of the selected options (the option id and its value)."
							},
							"response": [
								{
									"name": "Bad Request",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/test/:testKey/steps/:stepId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"test",
												":testKey",
												"steps",
												":stepId"
											],
											"variable": [
												{
													"key": "testKey"
												},
												{
													"key": "stepId"
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"error\": \"Test step with id 123 not found or does not belong to Test with key CALC-123.\"\n}"
								},
								{
									"name": "Successful operation",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/test/:testKey/steps/:stepId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"test",
												":testKey",
												"steps",
												":stepId"
											],
											"variable": [
												{
													"key": "testKey"
												},
												{
													"key": "stepId"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"step\": {\n  \"id\": 85778,\n  \"index\": 1,\n  \"fields\": \"Ut consectetur ut\",\n  \"attachments\": [\n   {\n    \"id\": -11748374,\n    \"filename\": \"non dolor\",\n    \"fileIcon\": \"deserunt non eu ut\",\n    \"mimeType\": \"ipsum anim deserunt labore est\",\n    \"fileIconAlt\": \"officia pariatur laboris dolor in\",\n    \"fileSize\": \"laborum non\",\n    \"numericalFileSize\": 24684888,\n    \"created\": \"eiusmod\",\n    \"createdDate\": 36333219,\n    \"author\": \"consequat aliquip sint\",\n    \"authorFullName\": \"adipisicing min\",\n    \"fileURL\": \"ex cillum\",\n    \"filePath\": \"exercitation anim dolore\"\n   },\n   {\n    \"id\": 59585361,\n    \"filename\": \"labore cupidata\",\n    \"fileIcon\": \"non pariatur est\",\n    \"mimeType\": \"culpa\",\n    \"fileIconAlt\": \"cillum enim officia\",\n    \"fileSize\": \"in commodo\",\n    \"numericalFileSize\": 23955750,\n    \"created\": \"cupidatat\",\n    \"createdDate\": 3838679,\n    \"author\": \"officia sunt\",\n    \"authorFullName\": \"cillum ut anim cupidatat\",\n    \"fileURL\": \"fug\",\n    \"filePath\": \"magna\"\n   }\n  ]\n }\n}"
								},
								{
									"name": "Internal Server error",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/test/:testKey/steps/:stepId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"test",
												":testKey",
												"steps",
												":stepId"
											],
											"variable": [
												{
													"key": "testKey"
												},
												{
													"key": "stepId"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"error\": \"Internal server exception cause.\"\n}"
								}
							]
						},
						{
							"name": "/test/:testKey/steps",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c5c6714c-d481-4456-b2c5-b1373d347f78",
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.test(\"Created step returned\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.not.be.empty;",
											"    pm.expect(jsonData.step.id).to.be.gt(0);",
											"    pm.collectionVariables.set(\"T1_NEWSTEP_ID\",jsonData.step.id);",
											"    pm.collectionVariables.set(\"T1_NEWSTEP_ATTACH1_ID\",jsonData.step.attachmentIds[0]);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"fields\": {\n            \"action\": \"<p>Step 1X/p>\",\n            \"Data\": \"<p>input Data X</p>\",\n            \"Expected Result\": \"<p>Expected result X</p>\"\n    },\n    \"attachments\": [\n        {\n            \"data\": \"ZHVtbXkgY29udGVudA==\",\n            \"filename\": \"dummy.txt\",\n            \"contentType\": \"text/plain\"\n        }\n    ]\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{JIRA_BASEURL}}/rest/raven/2.0/api/test/:testKey/steps",
									"host": [
										"{{JIRA_BASEURL}}"
									],
									"path": [
										"rest",
										"raven",
										"2.0",
										"api",
										"test",
										":testKey",
										"steps"
									],
									"variable": [
										{
											"key": "testKey",
											"value": "{{T1_KEY}}",
											"description": "(Required) The key of the test issue, e.g., CALC-562"
										}
									]
								},
								"description": "Create a new test step. All step fields values are listed under _fields_ and identified by the name and a list of attachments to add to the step. The field values should follow a certain format according to the custom field type. <br /><br /> - **Toggle Fields** values should be _\"true\"_, _\"false\"_, _\"0\"_ or _\"1\"_ <br /><br /> - **Number Fields** values should be a string containing a number, e.g. _\"320\"_. Decimal Number are also accepted,for instance, \"320.5\". The decimal places are always separated by a _\".\"_ <br /> <br /> - **Single Select and Radio Button Fields** values should be a single string containing the option value, e.g. _\"Option A\"_. The value should be a valid option for that custom field. The values are not case sensitive. <br /><br /> - **Multiple Select Fields** values should be an array of the string of option values, e.g. _[\"Option A\", \"Option B\"]_. All the selected values should be valid for that custom field. The option values are not case sensitive. <br /><br /> - **Date Fields** should follow the ISO format _yyyy-MM-dd_, where _yyyy_ represents the year, _MM_ the month in year and _dd_ the day in the month. For instance, a valid value would be _\"2020-05-02\"_. <br /><br /> - **Date Time fields** should be in UTC following the ISO format _yyyy-MM-dd'T'HH:mm'Z'_. The date part follows the same date format, while _HH_ represents the hours (0-24), _mm_ the minutes in hour and _Z_ indicates the hour in UTC. For instance, a valid date time value would be _\"2020-05-02T10:30Z\"_. <br /><br />\nThe remaining field types values do not required a specific validation. For instance, for a Single Line Custom field a valid value would be _\"Perform Action B\"_. <br /><br /> If some value is not valid for a certain custom field type, an error will be return stating the field with the incorrect value. Furthermore, **all required step fields must be provided**."
							},
							"response": [
								{
									"name": "Internal Server error",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"fields\": \"<object>\",\n    \"attachments\": [\n        {\n            \"data\": \"gsddfgdsfg...(base64)\",\n            \"filename\": \"example.txt\",\n            \"contentType\": \"plain/text\"\n        },\n        {\n            \"data\": \"gsddfgdsfg...(base64)\",\n            \"filename\": \"example.txt\",\n            \"contentType\": \"plain/text\"\n        }\n    ]\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/test/:testKey/steps",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"test",
												":testKey",
												"steps"
											],
											"variable": [
												{
													"key": "testKey"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"error\": \"Internal server exception cause.\"\n}"
								},
								{
									"name": "Successful operation. The response returns the id of the created steps as well as a list containing the attachments ids. Furthermore, the response contains a list of warning with some errors that may occur during the step creation, e.g., some attachment is not successfull created",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"fields\": \"<object>\",\n    \"attachments\": [\n        {\n            \"data\": \"gsddfgdsfg...(base64)\",\n            \"filename\": \"example.txt\",\n            \"contentType\": \"plain/text\"\n        },\n        {\n            \"data\": \"gsddfgdsfg...(base64)\",\n            \"filename\": \"example.txt\",\n            \"contentType\": \"plain/text\"\n        }\n    ]\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/test/:testKey/steps",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"test",
												":testKey",
												"steps"
											],
											"variable": [
												{
													"key": "testKey"
												}
											]
										}
									},
									"status": "Created",
									"code": 201,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"step\": {\n  \"id\": 85860,\n  \"attachmentIds\": [\n   25737,\n   25738\n  ]\n }\n}"
								},
								{
									"name": "Bad Request",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"fields\": \"<object>\",\n    \"attachments\": [\n        {\n            \"data\": \"gsddfgdsfg...(base64)\",\n            \"filename\": \"example.txt\",\n            \"contentType\": \"plain/text\"\n        },\n        {\n            \"data\": \"gsddfgdsfg...(base64)\",\n            \"filename\": \"example.txt\",\n            \"contentType\": \"plain/text\"\n        }\n    ]\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/test/:testKey/steps",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"test",
												":testKey",
												"steps"
											],
											"variable": [
												{
													"key": "testKey"
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"error\": \"Error creating test step: Custom Field Date is invalid, [2020-Feb-02] should be in the valid date format ( dd/MMM/yy ).\"\n}"
								}
							]
						},
						{
							"name": "/test/:testKey/steps/:stepId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "914fd411-84f9-422b-96ca-a474efa37acc",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"data returned\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.not.be.empty;",
											"    pm.expect(jsonData.step.id).to.eq(pm.collectionVariables.get(\"T1_NEWSTEP_ID\"));",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n   \"fields\": {\n        \"Action\":\"example step5x\",\n        \"Data\":\"example data5x\",\n        \"Expected Result\":\"example result5x\"\n   },\n   \"attachments\": {\n\t   \t\"add\": [\n\t\t\t\t{\n\t\t\t\t   \"data\":\"ZHVtbXkgY29udGVudA==\",\n\t\t\t\t   \"filename\":\"dummy.txt\",\n\t\t\t\t   \"contentType\":\"text/plain\"\n\t\t\t\t}\n\t\t\t]\n   }\n}\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{JIRA_BASEURL}}/rest/raven/2.0/api/test/:testKey/steps/:stepId",
									"host": [
										"{{JIRA_BASEURL}}"
									],
									"path": [
										"rest",
										"raven",
										"2.0",
										"api",
										"test",
										":testKey",
										"steps",
										":stepId"
									],
									"variable": [
										{
											"key": "testKey",
											"value": "{{T1_KEY}}",
											"description": "(Required) Test Key"
										},
										{
											"key": "stepId",
											"value": "{{T1_NEWSTEP_ID}}",
											"description": "(Required) The id of the test step"
										}
									]
								},
								"description": "Updates the values of an existing test step, given the test key and step id. The user can update the field values and the attachments of a step. The values should follow a specific format similar to the step creation. <br/><br/> - **Toggle Fields** values should be _\"true\"_, _\"false\"_, _\"0\"_ or _\"1\"_ <br /><br /> - **Number Fields** values should be a string containing a number, e.g. _\"320\"_. Decimal Number are also accepted,for instance, \"320.5\". The decimal places are always separated by a _\".\"_ <br /> <br /> - **Single Select and Radio Button Fields** values should be a single string containing the option value, e.g. _\"Option A\"_. The value should be a valid option for that custom field. The values are not case sensitive. <br /><br /> - **Multiple Select Fields** values should be an array of the string of option values, e.g. _[\"Option A\", \"Option B\"]_. All the selected values should be valid for that custom field. The option values are not case sensitive. <br /><br /> - **Date Fields** should follow the ISO format _yyyy-MM-dd_, where _yyyy_ represents the year, _MM_ the month in year and _dd_ the day in the month. For instance, a valid value would be _\"2020-05-02\"_. <br /><br /> - **Date Time fields** should be in UTC following the ISO format _yyyy-MM-dd'T'HH:mm'Z'_. The date part follows the same date format, while _HH_ represents the hours (0-24), _mm_ the minutes in hour and _Z_ indicates the hour in UTC. For instance, a valid date time value would be _\"2020-05-02T10:30Z\"_. <br /><br />\nThe remaining field types values do not required a specific validation. For instance, for a Single Line Custom field a valid value would be _\"Perform Action B\"_. <br /><br /> If some value is not valid for a certain custom field type, an error will be return stating the field with the incorrect value. A field value can be deleted sending an empty value, such as _\"\"_ or _[]_, or by sending _null_. **It is not possible to delete the value of a required field.**"
							},
							"response": [
								{
									"name": "Internal Server error",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"fields\": \"<object>\",\n    \"attachments\": {\n        \"add\": [\n            {\n                \"data\": \"gsddfgdsfg...(base64)\",\n                \"filename\": \"example.txt\",\n                \"contentType\": \"plain/text\"\n            },\n            {\n                \"data\": \"gsddfgdsfg...(base64)\",\n                \"filename\": \"example.txt\",\n                \"contentType\": \"plain/text\"\n            }\n        ],\n        \"remove\": [\n            1234,\n            4546\n        ]\n    }\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/test/:testKey/steps/:stepId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"test",
												":testKey",
												"steps",
												":stepId"
											],
											"variable": [
												{
													"key": "testKey"
												},
												{
													"key": "stepId"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"error\": \"Internal server exception cause.\"\n}"
								},
								{
									"name": "Successful operation",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"fields\": \"<object>\",\n    \"attachments\": {\n        \"add\": [\n            {\n                \"data\": \"gsddfgdsfg...(base64)\",\n                \"filename\": \"example.txt\",\n                \"contentType\": \"plain/text\"\n            },\n            {\n                \"data\": \"gsddfgdsfg...(base64)\",\n                \"filename\": \"example.txt\",\n                \"contentType\": \"plain/text\"\n            }\n        ],\n        \"remove\": [\n            1234,\n            4546\n        ]\n    }\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/test/:testKey/steps/:stepId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"test",
												":testKey",
												"steps",
												":stepId"
											],
											"variable": [
												{
													"key": "testKey"
												},
												{
													"key": "stepId"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"step\": {\n  \"id\": 85860,\n  \"attachmentIds\": [\n   25737,\n   25738\n  ]\n },\n \"warnings\": [\n  \"consectetur\",\n  \"et\"\n ]\n}"
								},
								{
									"name": "Bad Request. Occurs when there is some error in the request, for instance, the test with provided key does not exist or some field has an invalid value (e.g. Option \"A\" does not exist for an option field).",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"fields\": \"<object>\",\n    \"attachments\": {\n        \"add\": [\n            {\n                \"data\": \"gsddfgdsfg...(base64)\",\n                \"filename\": \"example.txt\",\n                \"contentType\": \"plain/text\"\n            },\n            {\n                \"data\": \"gsddfgdsfg...(base64)\",\n                \"filename\": \"example.txt\",\n                \"contentType\": \"plain/text\"\n            }\n        ],\n        \"remove\": [\n            1234,\n            4546\n        ]\n    }\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/test/:testKey/steps/:stepId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"test",
												":testKey",
												"steps",
												":stepId"
											],
											"variable": [
												{
													"key": "testKey"
												},
												{
													"key": "stepId"
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"error\": \"Error updating test step: Required fields cannot have empty values.\"\n}"
								}
							]
						},
						{
							"name": "/test/:testKey/steps/:stepId/attachments",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fbd78beb-a527-4781-b015-cdad410adef9",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"data returned\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.not.be.empty;",
											"});",
											"",
											"pm.test(\"attachments returned\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.have.lengthOf.at.least(1);",
											"    pm.expect(jsonData[0].id).to.eq(pm.collectionVariables.get(\"T1_NEWSTEP_ATTACH1_ID\"));",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{JIRA_BASEURL}}/rest/raven/2.0/api/test/:testKey/steps/:stepId/attachments",
									"host": [
										"{{JIRA_BASEURL}}"
									],
									"path": [
										"rest",
										"raven",
										"2.0",
										"api",
										"test",
										":testKey",
										"steps",
										":stepId",
										"attachments"
									],
									"variable": [
										{
											"key": "testKey",
											"value": "{{T1_KEY}}",
											"description": "(Required) Test with key CALC-123 does not exist or is not a manual test."
										},
										{
											"key": "stepId",
											"value": "{{T1_NEWSTEP_ID}}",
											"description": "(Required) The id of the test step"
										}
									]
								},
								"description": "Returns all the attachments of a test step, given the test key and step id."
							},
							"response": [
								{
									"name": "Successful operation. Returns a body with the attachments information.",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/test/:testKey/steps/:stepId/attachments",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"test",
												":testKey",
												"steps",
												":stepId",
												"attachments"
											],
											"variable": [
												{
													"key": "testKey"
												},
												{
													"key": "stepId"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "[\n {\n  \"id\": 4561389,\n  \"filename\": \"magna deserunt ex esse\",\n  \"fileIcon\": \"nost\",\n  \"mimeType\": \"nulla\",\n  \"fileIconAlt\": \"cillum\",\n  \"fileSize\": \"deserunt culpa Excepteur\",\n  \"numericalFileSize\": 78238228,\n  \"created\": \"nisi voluptate\",\n  \"createdDate\": -13195710,\n  \"author\": \"qui id\",\n  \"authorFullName\": \"deserunt\",\n  \"fileURL\": \"Duis eiusmod\",\n  \"filePath\": \"dolore ea\"\n },\n {\n  \"id\": 34990563,\n  \"filename\": \"deserunt ipsum occaecat anim\",\n  \"fileIcon\": \"in\",\n  \"mimeType\": \"aliquip ad\",\n  \"fileIconAlt\": \"dolore nulla\",\n  \"fileSize\": \"nostrud laboris ullamco id quis\",\n  \"numericalFileSize\": 91814840,\n  \"created\": \"consectetur incididunt elit\",\n  \"createdDate\": 38048892,\n  \"author\": \"ullamco sint in do\",\n  \"authorFullName\": \"cupidatat officia deserunt ipsum\",\n  \"fileURL\": \"voluptate fugiat eu irure\",\n  \"filePath\": \"elit magna ut minim\"\n }\n]"
								},
								{
									"name": "Internal Server error",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/test/:testKey/steps/:stepId/attachments",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"test",
												":testKey",
												"steps",
												":stepId",
												"attachments"
											],
											"variable": [
												{
													"key": "testKey"
												},
												{
													"key": "stepId"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"error\": \"Internal server exception cause.\"\n}"
								},
								{
									"name": "Bad Request",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/test/:testKey/steps/:stepId/attachments",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"test",
												":testKey",
												"steps",
												":stepId",
												"attachments"
											],
											"variable": [
												{
													"key": "testKey"
												},
												{
													"key": "stepId"
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"error\": \"The step with id 8578 does not belong to test with key CALC-67187.\"\n}"
								}
							]
						},
						{
							"name": "/test/:testKey/steps/:stepId/attachment/:attachmentId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "abe869c9-800e-4d4c-bd9d-39e44d4af1c3",
										"exec": [
											"pm.test(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{JIRA_BASEURL}}/rest/raven/2.0/api/test/:testKey/steps/:stepId/attachment/:attachmentId",
									"host": [
										"{{JIRA_BASEURL}}"
									],
									"path": [
										"rest",
										"raven",
										"2.0",
										"api",
										"test",
										":testKey",
										"steps",
										":stepId",
										"attachment",
										":attachmentId"
									],
									"variable": [
										{
											"key": "testKey",
											"value": "{{T1_KEY}}",
											"description": "(Required) Test with key CALC-123 does not exist or is not a manual test."
										},
										{
											"key": "stepId",
											"value": "{{T1_NEWSTEP_ID}}",
											"description": "(Required) The id of the test step"
										},
										{
											"key": "attachmentId",
											"value": "{{T1_NEWSTEP_ATTACH1_ID}}",
											"description": "(Required) The id of the attachment"
										}
									]
								},
								"description": "Deletes a test step attachment, given the test key and step and attachment ids."
							},
							"response": [
								{
									"name": "Successful operation. No content is returned.",
									"originalRequest": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/test/:testKey/steps/:stepId/attachment/:attachmentId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"test",
												":testKey",
												"steps",
												":stepId",
												"attachment",
												":attachmentId"
											],
											"variable": [
												{
													"key": "testKey"
												},
												{
													"key": "stepId"
												},
												{
													"key": "attachmentId"
												}
											]
										}
									},
									"status": "No Content",
									"code": 204,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Internal Server error",
									"originalRequest": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/test/:testKey/steps/:stepId/attachment/:attachmentId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"test",
												":testKey",
												"steps",
												":stepId",
												"attachment",
												":attachmentId"
											],
											"variable": [
												{
													"key": "testKey"
												},
												{
													"key": "stepId"
												},
												{
													"key": "attachmentId"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"error\": \"Internal server exception cause.\"\n}"
								},
								{
									"name": "Bad Request",
									"originalRequest": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/test/:testKey/steps/:stepId/attachment/:attachmentId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"test",
												":testKey",
												"steps",
												":stepId",
												"attachment",
												":attachmentId"
											],
											"variable": [
												{
													"key": "testKey"
												},
												{
													"key": "stepId"
												},
												{
													"key": "attachmentId"
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"error\": \"Test with key CALC-123 does not exist or is not a manual test.\"\n}"
								}
							]
						},
						{
							"name": "/test/:testKey/steps/:stepId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c45d5177-8bba-4f19-b7cd-e0077f7c3bba",
										"exec": [
											"pm.test(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{JIRA_BASEURL}}/rest/raven/2.0/api/test/:testKey/steps/:stepId",
									"host": [
										"{{JIRA_BASEURL}}"
									],
									"path": [
										"rest",
										"raven",
										"2.0",
										"api",
										"test",
										":testKey",
										"steps",
										":stepId"
									],
									"variable": [
										{
											"key": "testKey",
											"value": "{{T1_KEY}}",
											"description": "(Required) The key of the test issue, e.g., CALC-562"
										},
										{
											"key": "stepId",
											"value": "{{T1_NEWSTEP_ID}}",
											"description": "(Required) The id of the test step"
										}
									]
								},
								"description": "Deletes a test step given the test key and the step id."
							},
							"response": [
								{
									"name": "Internal Server error",
									"originalRequest": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/test/:testKey/steps/:stepId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"test",
												":testKey",
												"steps",
												":stepId"
											],
											"variable": [
												{
													"key": "testKey"
												},
												{
													"key": "stepId"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"error\": \"Internal server exception cause.\"\n}"
								},
								{
									"name": "Successful operation. No content is returned.",
									"originalRequest": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/test/:testKey/steps/:stepId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"test",
												":testKey",
												"steps",
												":stepId"
											],
											"variable": [
												{
													"key": "testKey"
												},
												{
													"key": "stepId"
												}
											]
										}
									},
									"status": "No Content",
									"code": 204,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Bad Request",
									"originalRequest": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/test/:testKey/steps/:stepId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"test",
												":testKey",
												"steps",
												":stepId"
											],
											"variable": [
												{
													"key": "testKey"
												},
												{
													"key": "stepId"
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"error\": \"Test with key CALC-123 does not exist or is not a manual test.\"\n}"
								}
							]
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "b1996fb5-04ed-431f-b304-072cda2b009a",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "464399d1-2b72-450f-a3e2-80be1b35bad9",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "a3b4013d-d9e3-4205-8cce-e6003f5ff500",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "8b17fd37-70b6-4572-9cfa-c902ddc8a8ea",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "tests",
			"item": [
				{
					"name": "export",
					"item": [
						{
							"name": "export tests",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a6df7983-3946-4905-8920-a94f66c5a839",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Tests returned\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.not.be.empty;",
											"});",
											"",
											"pm.test(\"3 Tests\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.have.lengthOf(3);",
											"    //pm.collectionVariables.set(\"T1_STEP1_ID\", jsonData[0].definition.steps[0].id)",
											"    // hack",
											"    if (jsonData[0].definition.steps != undefined){",
											"        pm.collectionVariables.set(\"T1_STEP1_ID\", jsonData[0].definition.steps[0].id)",
											"    }",
											"    if (jsonData[1].definition.steps != undefined){",
											"        pm.collectionVariables.set(\"T1_STEP1_ID\", jsonData[1].definition.steps[0].id)",
											"    }",
											"    if (jsonData[2].definition.steps != undefined){",
											"        pm.collectionVariables.set(\"T1_STEP1_ID\", jsonData[2].definition.steps[0].id)",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{JIRA_PASSWORD}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{JIRA_USERNAME}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{JIRA_BASEURL}}/rest/raven/2.0/api/test?keys={{T1_KEY}};{{T2_KEY}};{{T3_KEY}}",
									"host": [
										"{{JIRA_BASEURL}}"
									],
									"path": [
										"rest",
										"raven",
										"2.0",
										"api",
										"test"
									],
									"query": [
										{
											"key": "keys",
											"value": "{{T1_KEY}};{{T2_KEY}};{{T3_KEY}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "export test runs",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "900a13f9-3291-4562-87cf-be83258428e0",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"data returned\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.not.be.empty;",
											"});",
											"",
											"pm.test(\"1 Test Run returned\", function () {",
											"    var jsonData = pm.response.json();",
											"    //pm.expect(jsonData).to.have.lengthOf(1);",
											"    pm.expect(jsonData.length).to.be.above(0);",
											"    pm.collectionVariables.set(\"TR2_ID\",jsonData[0].id);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{JIRA_PASSWORD}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{JIRA_USERNAME}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{JIRA_BASEURL}}/rest/raven/2.0/api/test/{{T2_KEY}}/testruns",
									"host": [
										"{{JIRA_BASEURL}}"
									],
									"path": [
										"rest",
										"raven",
										"2.0",
										"api",
										"test",
										"{{T2_KEY}}",
										"testruns"
									],
									"query": [
										{
											"key": null,
											"value": "",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "export test executions",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "95e28a96-1406-4a5a-8533-138e7556c2e2",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"data returned\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.not.be.empty;",
											"});",
											"",
											"pm.test(\"1 Test Execution returned\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.have.lengthOf(1);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{JIRA_PASSWORD}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{JIRA_USERNAME}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{JIRA_BASEURL}}/rest/raven/2.0/api/test/{{T2_KEY}}/testexecutions",
									"host": [
										"{{JIRA_BASEURL}}"
									],
									"path": [
										"rest",
										"raven",
										"2.0",
										"api",
										"test",
										"{{T2_KEY}}",
										"testexecutions"
									],
									"query": [
										{
											"key": null,
											"value": "",
											"disabled": true
										}
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "test steps",
					"item": [
						{
							"name": "get all test steps",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fec048b7-f982-4344-9d7b-035542bf5bf6",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"data returned\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.not.be.empty;",
											"});",
											"",
											"pm.test(\"4 steps returned\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.have.lengthOf(4);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{JIRA_PASSWORD}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{JIRA_USERNAME}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{JIRA_BASEURL}}/rest/raven/1.0/api/test/{{T1_KEY}}/step",
									"host": [
										"{{JIRA_BASEURL}}"
									],
									"path": [
										"rest",
										"raven",
										"1.0",
										"api",
										"test",
										"{{T1_KEY}}",
										"step"
									],
									"query": [
										{
											"key": null,
											"value": "",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "get a specific test step by id",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1e429e7e-4070-4629-ade6-87ba339bd4c9",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"data returned\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.not.be.empty;",
											"});",
											"",
											"pm.test(\"step details returned\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.id).to.eq(pm.collectionVariables.get(\"T1_STEP1_ID\"));",
											"    pm.expect(jsonData.index).to.eq(1);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{JIRA_PASSWORD}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{JIRA_USERNAME}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{JIRA_BASEURL}}/rest/raven/1.0/api/test/{{T1_KEY}}/step/{{T1_STEP1_ID}}",
									"host": [
										"{{JIRA_BASEURL}}"
									],
									"path": [
										"rest",
										"raven",
										"1.0",
										"api",
										"test",
										"{{T1_KEY}}",
										"step",
										"{{T1_STEP1_ID}}"
									],
									"query": [
										{
											"key": null,
											"value": "",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "add a step, with an attachment",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "00cbbff5-6cae-4b04-ad03-239e8dad3b9e",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"data returned\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.not.be.empty;",
											"    pm.collectionVariables.set(\"T1_NEWSTEP_ID\",jsonData.id);",
											"    pm.collectionVariables.set(\"T1_NEWSTEP_ATTACH1_ID\",jsonData.attachmentIds[0]);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{JIRA_PASSWORD}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{JIRA_USERNAME}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n   \"step\":\"example step5\",\n   \"data\":\"example data5\",\n   \"result\":\"example result5\",\n   \"attachments\":[\n\t\t{\n\t\t   \"data\":\"ZHVtbXkgY29udGVudA==\",\n\t\t   \"filename\":\"dummy.txt\",\n\t\t   \"contentType\":\"text/plain\"\n\t\t}\n   ]\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{JIRA_BASEURL}}/rest/raven/1.0/api/test/{{T1_KEY}}/step",
									"host": [
										"{{JIRA_BASEURL}}"
									],
									"path": [
										"rest",
										"raven",
										"1.0",
										"api",
										"test",
										"{{T1_KEY}}",
										"step"
									],
									"query": [
										{
											"key": null,
											"value": "",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "modify a step",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0d1b664a-cfa4-412b-a7f3-3a0939e83040",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"data returned\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.not.be.empty;",
											"    pm.expect(jsonData.id).to.eq(pm.collectionVariables.get(\"T1_NEWSTEP_ID\"));",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{JIRA_PASSWORD}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{JIRA_USERNAME}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n   \"step\":\"example step5x\",\n   \"data\":\"example data5x\",\n   \"result\":\"example result5x\",\n   \"attachments\": {\n\t   \t\"add\": [\n\t\t\t\t{\n\t\t\t\t   \"data\":\"ZHVtbXkgY29udGVudA==\",\n\t\t\t\t   \"filename\":\"dummy.txt\",\n\t\t\t\t   \"contentType\":\"text/plain\"\n\t\t\t\t}\n\t\t\t]\n   }\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{JIRA_BASEURL}}/rest/raven/1.0/api/test/{{T1_KEY}}/step/{{T1_NEWSTEP_ID}}",
									"host": [
										"{{JIRA_BASEURL}}"
									],
									"path": [
										"rest",
										"raven",
										"1.0",
										"api",
										"test",
										"{{T1_KEY}}",
										"step",
										"{{T1_NEWSTEP_ID}}"
									],
									"query": [
										{
											"key": null,
											"value": "",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "get all step attachments",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "56bddf51-cac6-4273-a6bf-541c2a351a46",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"data returned\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.not.be.empty;",
											"});",
											"",
											"pm.test(\"step details returned\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.id).to.eq(pm.collectionVariables.get(\"T1_STEP1_ID\"));",
											"    pm.expect(jsonData.index).to.eq(1);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{JIRA_PASSWORD}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{JIRA_USERNAME}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{JIRA_BASEURL}}/rest/raven/1.0/api/test/{{T1_KEY}}/step/{{T1_STEP1_ID}}",
									"host": [
										"{{JIRA_BASEURL}}"
									],
									"path": [
										"rest",
										"raven",
										"1.0",
										"api",
										"test",
										"{{T1_KEY}}",
										"step",
										"{{T1_STEP1_ID}}"
									],
									"query": [
										{
											"key": null,
											"value": "",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "delete a step attachment, by id",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1cc0b739-dc4d-4d10-9f87-a65f7cd663cb",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{JIRA_PASSWORD}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{JIRA_USERNAME}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{JIRA_BASEURL}}/rest/raven/1.0/api/test/{{T1_KEY}}/step/{{T1_NEWSTEP_ID}}/attachment/{{T1_NEWSTEP_ATTACH1_ID}}",
									"host": [
										"{{JIRA_BASEURL}}"
									],
									"path": [
										"rest",
										"raven",
										"1.0",
										"api",
										"test",
										"{{T1_KEY}}",
										"step",
										"{{T1_NEWSTEP_ID}}",
										"attachment",
										"{{T1_NEWSTEP_ATTACH1_ID}}"
									],
									"query": [
										{
											"key": null,
											"value": "",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "delete a step, by id",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1d56cb9e-e386-464d-8423-35664ae89936",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{JIRA_PASSWORD}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{JIRA_USERNAME}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{JIRA_BASEURL}}/rest/raven/1.0/api/test/{{T1_KEY}}/step/{{T1_NEWSTEP_ID}}",
									"host": [
										"{{JIRA_BASEURL}}"
									],
									"path": [
										"rest",
										"raven",
										"1.0",
										"api",
										"test",
										"{{T1_KEY}}",
										"step",
										"{{T1_NEWSTEP_ID}}"
									],
									"query": [
										{
											"key": null,
											"value": "",
											"disabled": true
										}
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "preconditions",
			"item": [
				{
					"name": "associate test to a precondition",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "38b8c7b4-2e49-46bb-9081-0818a148fe4d",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"no data returned\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.be.empty;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{JIRA_PASSWORD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{JIRA_USERNAME}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"add\": [\n        \"{{T1_KEY}}\"\n        ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{JIRA_BASEURL}}/rest/raven/2.0/api/precondition/{{P1_KEY}}/test",
							"host": [
								"{{JIRA_BASEURL}}"
							],
							"path": [
								"rest",
								"raven",
								"2.0",
								"api",
								"precondition",
								"{{P1_KEY}}",
								"test"
							]
						}
					},
					"response": []
				},
				{
					"name": "export test' preconditions",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "676089cd-99bb-4b8d-883e-26652a46acc5",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"data returned\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.not.be.empty;",
									"});",
									"",
									"pm.test(\"1 Precondition returned\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.lengthOf(1);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{JIRA_PASSWORD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{JIRA_USERNAME}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{JIRA_BASEURL}}/rest/raven/2.0/api/test/{{T1_KEY}}/preconditions",
							"host": [
								"{{JIRA_BASEURL}}"
							],
							"path": [
								"rest",
								"raven",
								"2.0",
								"api",
								"test",
								"{{T1_KEY}}",
								"preconditions"
							],
							"query": [
								{
									"key": null,
									"value": "",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "get tests associated to precondition",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9afa8541-f63d-483a-b661-f2116af99b16",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Test Runs returned\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.not.be.empty;",
									"});",
									"",
									"pm.test(\"1 Test Run returned\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.lengthOf(1);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{JIRA_PASSWORD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{JIRA_USERNAME}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{JIRA_BASEURL}}/rest/raven/2.0/api/precondition/{{P1_KEY}}/test",
							"host": [
								"{{JIRA_BASEURL}}"
							],
							"path": [
								"rest",
								"raven",
								"2.0",
								"api",
								"precondition",
								"{{P1_KEY}}",
								"test"
							],
							"query": [
								{
									"key": null,
									"value": "",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "disassociate test from a precondition",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f3d31702-35b3-4c4b-95b5-32dc29dca68e",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"no data returned\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.be.empty;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{JIRA_PASSWORD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{JIRA_USERNAME}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"remove\": [\n        \"{{T1_KEY}}\"\n        ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{JIRA_BASEURL}}/rest/raven/2.0/api/precondition/{{P1_KEY}}/test",
							"host": [
								"{{JIRA_BASEURL}}"
							],
							"path": [
								"rest",
								"raven",
								"2.0",
								"api",
								"precondition",
								"{{P1_KEY}}",
								"test"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "test sets",
			"item": [
				{
					"name": "associate test to a test set",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "8594c8df-963a-4d40-80dd-698825b497bf",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"no data returned\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.be.empty;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{JIRA_PASSWORD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{JIRA_USERNAME}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"add\": [\n        \"{{T1_KEY}}\"\n        ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{JIRA_BASEURL}}/rest/raven/2.0/api/testset/{{TS1_KEY}}/test",
							"host": [
								"{{JIRA_BASEURL}}"
							],
							"path": [
								"rest",
								"raven",
								"2.0",
								"api",
								"testset",
								"{{TS1_KEY}}",
								"test"
							]
						}
					},
					"response": []
				},
				{
					"name": "get tests associated to test set",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6b08ab7a-0d03-40f2-b68b-38510b90264b",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Test Runs returned\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.not.be.empty;",
									"});",
									"",
									"pm.test(\"1 Test Run returned\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.lengthOf(1);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{JIRA_PASSWORD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{JIRA_USERNAME}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{JIRA_BASEURL}}/rest/raven/2.0/api/testset/{{TS1_KEY}}/test",
							"host": [
								"{{JIRA_BASEURL}}"
							],
							"path": [
								"rest",
								"raven",
								"2.0",
								"api",
								"testset",
								"{{TS1_KEY}}",
								"test"
							],
							"query": [
								{
									"key": null,
									"value": "",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "export test' test sets",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b043a0ed-741a-4c92-b028-b12ddeec166f",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"data returned\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.not.be.empty;",
									"});",
									"",
									"pm.test(\"1 Test Set returned\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.lengthOf(1);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{JIRA_PASSWORD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{JIRA_USERNAME}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{JIRA_BASEURL}}/rest/raven/2.0/api/test/{{T1_KEY}}/testsets",
							"host": [
								"{{JIRA_BASEURL}}"
							],
							"path": [
								"rest",
								"raven",
								"2.0",
								"api",
								"test",
								"{{T1_KEY}}",
								"testsets"
							],
							"query": [
								{
									"key": null,
									"value": "",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "disassociate test from a test set",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "2c1b1b3c-8435-4e0d-addb-6ec5c20bf0f0",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"no data returned\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.be.empty;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{JIRA_PASSWORD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{JIRA_USERNAME}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"remove\": [\n        \"{{T1_KEY}}\"\n        ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{JIRA_BASEURL}}/rest/raven/2.0/api/testset/{{TS1_KEY}}/test",
							"host": [
								"{{JIRA_BASEURL}}"
							],
							"path": [
								"rest",
								"raven",
								"2.0",
								"api",
								"testset",
								"{{TS1_KEY}}",
								"test"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "test executions",
			"item": [
				{
					"name": "associate test to a test execution",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b0e06997-c40c-49d1-9683-3a8e6208e91e",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"no data returned\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.be.empty;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{JIRA_PASSWORD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{JIRA_USERNAME}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"add\": [\n        \"{{T4_KEY}}\"\n        ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{JIRA_BASEURL}}/rest/raven/2.0/api/testexec/{{TE1_KEY}}/test",
							"host": [
								"{{JIRA_BASEURL}}"
							],
							"path": [
								"rest",
								"raven",
								"2.0",
								"api",
								"testexec",
								"{{TE1_KEY}}",
								"test"
							]
						}
					},
					"response": []
				},
				{
					"name": "get tests associated to test execution",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a597803d-43f9-4228-8bf1-5ab46b86fc10",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Test Runs returned\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.not.be.empty;",
									"});",
									"",
									"pm.test(\"1 Test Run returned\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.lengthOf(4);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{JIRA_PASSWORD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{JIRA_USERNAME}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{JIRA_BASEURL}}/rest/raven/2.0/api/testexec/{{TE1_KEY}}/test",
							"host": [
								"{{JIRA_BASEURL}}"
							],
							"path": [
								"rest",
								"raven",
								"2.0",
								"api",
								"testexec",
								"{{TE1_KEY}}",
								"test"
							],
							"query": [
								{
									"key": null,
									"value": "",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "disassociate test from a test execution",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1d1b4d17-96ff-4f04-ab73-0970ef1cbcc3",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"no data returned\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.be.empty;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{JIRA_PASSWORD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{JIRA_USERNAME}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"remove\": [\n        \"{{T4_KEY}}\"\n        ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{JIRA_BASEURL}}/rest/raven/2.0/api/testexec/{{TE1_KEY}}/test",
							"host": [
								"{{JIRA_BASEURL}}"
							],
							"path": [
								"rest",
								"raven",
								"2.0",
								"api",
								"testexec",
								"{{TE1_KEY}}",
								"test"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "72b938c9-d4f8-48a6-92de-41eac9023fae",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "edabfe5d-d7de-462e-ab0d-4260e43caa5a",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "test runs",
			"item": [
				{
					"name": "details",
					"item": [
						{
							"name": "/testrun (T1)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "32fdf467-41ce-43a0-b499-1086dae07f05",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"data returned\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.not.be.empty;",
											"    pm.expect(jsonData.testKey).to.eq(pm.collectionVariables.get(\"T1_KEY\"));",
											"    pm.expect(jsonData.testExecKey).to.eq(pm.collectionVariables.get(\"TE1_KEY\"));",
											"    pm.expect(jsonData.status).to.eq(\"PASS\");",
											"    pm.collectionVariables.set(\"TR1_ID\",jsonData.id);",
											"",
											"",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{JIRA_BASEURL}}/rest/raven/2.0/api/testrun?testExecIssueKey={{TE1_KEY}}&testIssueKey={{T1_KEY}}",
									"host": [
										"{{JIRA_BASEURL}}"
									],
									"path": [
										"rest",
										"raven",
										"2.0",
										"api",
										"testrun"
									],
									"query": [
										{
											"key": "testExecIssueKey",
											"value": "{{TE1_KEY}}",
											"description": "(Required) The key of the Test Execution"
										},
										{
											"key": "testIssueKey",
											"value": "{{T1_KEY}}",
											"description": "(Required) The key of the Test"
										}
									]
								},
								"description": "Retrieves a Test Run given the Test Execution and Test keys. <br/> The response will contain all information related to a Test Run, e.g., status, created and finish dates, step results, test environments, defects, Test Run Custom fields, and so on. <br/>"
							},
							"response": [
								{
									"name": "Successful operation. Returns a body containg the Test Run information.",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/testrun?testExecIssueKey=<string>&testIssueKey=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"testrun"
											],
											"query": [
												{
													"key": "testExecIssueKey",
													"value": "<string>"
												},
												{
													"key": "testIssueKey",
													"value": "<string>"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"id\": 1004725,\n \"status\": \"FAIL\",\n \"color\": \"#D45D52\",\n \"testKey\": \"CALC-67187\",\n \"testExecKey\": \"CALC-67193\",\n \"assignee\": \"admin\",\n \"executedBy\": \"admin\",\n \"startedOn\": \"2020-02-12T09:58:04Z\",\n \"finishedOn\": \"2020-02-12T10:58:04Z\",\n \"startedOnIso\": \"2020-02-12T09:58:04Z\",\n \"finishedOnIso\": \"2020-02-12T10:58:04Z\",\n \"duration\": 1923493000,\n \"defects\": [\n  \"CALC-1\",\n  \"CALC-2\"\n ],\n \"evidences\": [\n  {\n   \"id\": -89528513,\n   \"filename\": \"nostrud veniam anim\",\n   \"fileIcon\": \"adipisicing non\",\n   \"mimeType\": \"aliquip ullamco aute\",\n   \"fileIconAlt\": \"qui ad Ut aliquip\",\n   \"fileSize\": \"eu ex dolore mol\",\n   \"numericalFileSize\": 65346653,\n   \"created\": \"est tempor ea ut\",\n   \"createdDate\": 96067481,\n   \"author\": \"Lorem\",\n   \"authorFullName\": \"ex sint dolore\",\n   \"fileURL\": \"aliquip dolor ex\",\n   \"filePath\": \"ipsum commodo\"\n  },\n  {\n   \"id\": -63575159,\n   \"filename\": \"dolore sint cupidatat\",\n   \"fileIcon\": \"irure\",\n   \"mimeType\": \"cupidat\",\n   \"fileIconAlt\": \"pariatur dolore Duis\",\n   \"fileSize\": \"dolor\",\n   \"numericalFileSize\": -24429354,\n   \"created\": \"magna\",\n   \"createdDate\": -61161047,\n   \"author\": \"in ad in sunt\",\n   \"authorFullName\": \"sit\",\n   \"fileURL\": \"nisi pariatur nulla\",\n   \"filePath\": \"commodo et\"\n  }\n ],\n \"comment\": \"Test Run comment\",\n \"testEnvironments\": [\n  \"iOS\",\n  \"Android\"\n ],\n \"fixVersions\": [\n  {\n   \"id\": \"97845\",\n   \"name\": \"1.0\",\n   \"description\": \"Version 1.0\",\n   \"isArchived\": true,\n   \"isReleased\": false\n  },\n  {\n   \"id\": \"97845\",\n   \"name\": \"1.0\",\n   \"description\": \"Version 1.0\",\n   \"isArchived\": true,\n   \"isReleased\": false\n  }\n ],\n \"customFields\": [\n  {\n   \"id\": 28,\n   \"name\": \"Toogle Custom Field\",\n   \"value\": \"true\"\n  },\n  {\n   \"id\": 28,\n   \"name\": \"Toogle Custom Field\",\n   \"value\": \"true\"\n  }\n ],\n \"steps\": [\n  {\n   \"id\": 85778,\n   \"index\": 1,\n   \"fields\": \"exercitation laboris qui\",\n   \"attachments\": [\n    {\n     \"id\": -86303914,\n     \"filename\": \"sit anim elit est\",\n     \"fileIcon\": \"id\",\n     \"mimeType\": \"consectetur dolor quis\",\n     \"fileIconAlt\": \"nulla proident velit\",\n     \"fileSize\": \"eiusmod c\",\n     \"numericalFileSize\": -11357653,\n     \"created\": \"non reprehenderit ut\",\n     \"createdDate\": -45746300,\n     \"author\": \"incididunt ad\",\n     \"authorFullName\": \"eu ex\",\n     \"fileURL\": \"in sunt est laborum\",\n     \"filePath\": \"dolore sed Ut\"\n    },\n    {\n     \"id\": 25006787,\n     \"filename\": \"cupidatat dolor\",\n     \"fileIcon\": \"consectetur laboris\",\n     \"mimeType\": \"aliquip in reprehenderit culp\",\n     \"fileIconAlt\": \"cillum proident voluptate\",\n     \"fileSize\": \"tempor irure\",\n     \"numericalFileSize\": 47874816,\n     \"created\": \"in\",\n     \"createdDate\": -69533625,\n     \"author\": \"culpa proident voluptate nulla dolore\",\n     \"authorFullName\": \"eu Excepteur dolore\",\n     \"fileURL\": \"fugiat Duis enim minim\",\n     \"filePath\": \"irure\"\n    }\n   ],\n   \"status\": \"PASS\",\n   \"comment\": {\n    \"rendered\": \"Comment on step\"\n   },\n   \"defects\": [\n    \"CALC-123\",\n    \"CALC-765\"\n   ],\n   \"evidences\": [\n    {\n     \"id\": -84742047,\n     \"filename\": \"incididunt elit proiden\",\n     \"fileIcon\": \"voluptate nisi minim\",\n     \"mimeType\": \"sed laboris\",\n     \"fileIconAlt\": \"tempor non et magna sunt\",\n     \"fileSize\": \"dolore nisi\",\n     \"numericalFileSize\": -49730563,\n     \"created\": \"Duis sint\",\n     \"createdDate\": -41055574,\n     \"author\": \"in\",\n     \"authorFullName\": \"nisi mollit minim\",\n     \"fileURL\": \"in in ex dolore\",\n     \"filePath\": \"sed ut qui ullamco ipsum\"\n    },\n    {\n     \"id\": -6315286,\n     \"filename\": \"in eu elit aliqua\",\n     \"fileIcon\": \"enim\",\n     \"mimeType\": \"incididunt\",\n     \"fileIconAlt\": \"nostrud\",\n     \"fileSize\": \"officia dolor\",\n     \"numericalFileSize\": -59681487,\n     \"created\": \"sit et\",\n     \"createdDate\": -45373125,\n     \"author\": \"nulla est Lorem eu\",\n     \"authorFullName\": \"occaecat esse \",\n     \"fileURL\": \"veniam ut\",\n     \"filePath\": \"est Lorem\"\n    }\n   ],\n   \"actualResult\": {\n    \"rendered\": \"Actual result on step\"\n   }\n  },\n  {\n   \"id\": 85778,\n   \"index\": 1,\n   \"fields\": \"reprehenderit est pariatur sit\",\n   \"attachments\": [\n    {\n     \"id\": -83754441,\n     \"filename\": \"nostrud velit eu enim\",\n     \"fileIcon\": \"non ad a\",\n     \"mimeType\": \"pariatur culpa\",\n     \"fileIconAlt\": \"et enim\",\n     \"fileSize\": \"proi\",\n     \"numericalFileSize\": -61621919,\n     \"created\": \"nulla ipsum\",\n     \"createdDate\": -5826090,\n     \"author\": \"ea est ut\",\n     \"authorFullName\": \"officia\",\n     \"fileURL\": \"labore elit\",\n     \"filePath\": \"commodo ut\"\n    },\n    {\n     \"id\": -67964136,\n     \"filename\": \"in do eiusmod\",\n     \"fileIcon\": \"ex eu\",\n     \"mimeType\": \"es\",\n     \"fileIconAlt\": \"sint adipisicing reprehenderit sed sunt\",\n     \"fileSize\": \"reprehenderit proident dolor cillum\",\n     \"numericalFileSize\": -67901728,\n     \"created\": \"minim dolor aliquip\",\n     \"createdDate\": -79082282,\n     \"author\": \"magna veniam elit\",\n     \"authorFullName\": \"pariatur enim in cillum\",\n     \"fileURL\": \"in magna irure\",\n     \"filePath\": \"enim fugiat laboris sunt reprehenderit\"\n    }\n   ],\n   \"status\": \"PASS\",\n   \"comment\": {\n    \"rendered\": \"Comment on step\"\n   },\n   \"defects\": [\n    \"CALC-123\",\n    \"CALC-765\"\n   ],\n   \"evidences\": [\n    {\n     \"id\": -31365342,\n     \"filename\": \"velit Lorem consectetur magna\",\n     \"fileIcon\": \"anim amet\",\n     \"mimeType\": \"\",\n     \"fileIconAlt\": \"do ad laborum\",\n     \"fileSize\": \"laborum\",\n     \"numericalFileSize\": -90143393,\n     \"created\": \"amet sint sit\",\n     \"createdDate\": -72461974,\n     \"author\": \"nostrud sint\",\n     \"authorFullName\": \"culpa magna exercitation ut\",\n     \"fileURL\": \"ea eiusmod enim\",\n     \"filePath\": \"velit in minim consequat Duis\"\n    },\n    {\n     \"id\": -73603312,\n     \"filename\": \"Duis ut nostrud in dolor\",\n     \"fileIcon\": \"tempor exercitation mollit\",\n     \"mimeType\": \"in consectetur incididunt ut\",\n     \"fileIconAlt\": \"laborum dolor\",\n     \"fileSize\": \"commodo fugiat\",\n     \"numericalFileSize\": -61316937,\n     \"created\": \"reprehenderit non nisi\",\n     \"createdDate\": -98838928,\n     \"author\": \"amet proident qui\",\n     \"authorFullName\": \"dolor cillum Duis\",\n     \"fileURL\": \"reprehenderit in adipisicing\",\n     \"filePath\": \"consequat tempor\"\n    }\n   ],\n   \"actualResult\": {\n    \"rendered\": \"Actual result on step\"\n   }\n  }\n ]\n}"
								},
								{
									"name": "Bad Request",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/testrun?testExecIssueKey=<string>&testIssueKey=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"testrun"
											],
											"query": [
												{
													"key": "testExecIssueKey",
													"value": "<string>"
												},
												{
													"key": "testIssueKey",
													"value": "<string>"
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"error\": \"Test Run not found for Test Execution with key CALC-67 and Test issue with key CALC-67207.\"\n}"
								},
								{
									"name": "Internal Server error",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/testrun?testExecIssueKey=<string>&testIssueKey=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"testrun"
											],
											"query": [
												{
													"key": "testExecIssueKey",
													"value": "<string>"
												},
												{
													"key": "testIssueKey",
													"value": "<string>"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"error\": \"Internal server exception cause.\"\n}"
								}
							]
						},
						{
							"name": "/testrun (T3)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6e7d9907-f502-48c0-9c9e-c21f7e48d757",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"data returned\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.not.be.empty;",
											"    pm.expect(jsonData.testKey).to.eq(pm.collectionVariables.get(\"T3_KEY\"));",
											"    pm.expect(jsonData.testExecKey).to.eq(pm.collectionVariables.get(\"TE1_KEY\"));",
											"    pm.expect(jsonData.status).to.eq(\"PASS\");",
											"    pm.collectionVariables.set(\"TR3_ID\",jsonData.id);",
											"",
											"",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{JIRA_BASEURL}}/rest/raven/2.0/api/testrun?testExecIssueKey={{TE1_KEY}}&testIssueKey={{T3_KEY}}",
									"host": [
										"{{JIRA_BASEURL}}"
									],
									"path": [
										"rest",
										"raven",
										"2.0",
										"api",
										"testrun"
									],
									"query": [
										{
											"key": "testExecIssueKey",
											"value": "{{TE1_KEY}}",
											"description": "(Required) The key of the Test Execution"
										},
										{
											"key": "testIssueKey",
											"value": "{{T3_KEY}}",
											"description": "(Required) The key of the Test"
										}
									]
								},
								"description": "Retrieves a Test Run given the Test Execution and Test keys. <br/> The response will contain all information related to a Test Run, e.g., status, created and finish dates, step results, test environments, defects, Test Run Custom fields, and so on. <br/>"
							},
							"response": [
								{
									"name": "Successful operation. Returns a body containg the Test Run information.",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/testrun?testExecIssueKey=<string>&testIssueKey=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"testrun"
											],
											"query": [
												{
													"key": "testExecIssueKey",
													"value": "<string>"
												},
												{
													"key": "testIssueKey",
													"value": "<string>"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"id\": 1004725,\n \"status\": \"FAIL\",\n \"color\": \"#D45D52\",\n \"testKey\": \"CALC-67187\",\n \"testExecKey\": \"CALC-67193\",\n \"assignee\": \"admin\",\n \"executedBy\": \"admin\",\n \"startedOn\": \"2020-02-12T09:58:04Z\",\n \"finishedOn\": \"2020-02-12T10:58:04Z\",\n \"startedOnIso\": \"2020-02-12T09:58:04Z\",\n \"finishedOnIso\": \"2020-02-12T10:58:04Z\",\n \"duration\": 1923493000,\n \"defects\": [\n  \"CALC-1\",\n  \"CALC-2\"\n ],\n \"evidences\": [\n  {\n   \"id\": -89528513,\n   \"filename\": \"nostrud veniam anim\",\n   \"fileIcon\": \"adipisicing non\",\n   \"mimeType\": \"aliquip ullamco aute\",\n   \"fileIconAlt\": \"qui ad Ut aliquip\",\n   \"fileSize\": \"eu ex dolore mol\",\n   \"numericalFileSize\": 65346653,\n   \"created\": \"est tempor ea ut\",\n   \"createdDate\": 96067481,\n   \"author\": \"Lorem\",\n   \"authorFullName\": \"ex sint dolore\",\n   \"fileURL\": \"aliquip dolor ex\",\n   \"filePath\": \"ipsum commodo\"\n  },\n  {\n   \"id\": -63575159,\n   \"filename\": \"dolore sint cupidatat\",\n   \"fileIcon\": \"irure\",\n   \"mimeType\": \"cupidat\",\n   \"fileIconAlt\": \"pariatur dolore Duis\",\n   \"fileSize\": \"dolor\",\n   \"numericalFileSize\": -24429354,\n   \"created\": \"magna\",\n   \"createdDate\": -61161047,\n   \"author\": \"in ad in sunt\",\n   \"authorFullName\": \"sit\",\n   \"fileURL\": \"nisi pariatur nulla\",\n   \"filePath\": \"commodo et\"\n  }\n ],\n \"comment\": \"Test Run comment\",\n \"testEnvironments\": [\n  \"iOS\",\n  \"Android\"\n ],\n \"fixVersions\": [\n  {\n   \"id\": \"97845\",\n   \"name\": \"1.0\",\n   \"description\": \"Version 1.0\",\n   \"isArchived\": true,\n   \"isReleased\": false\n  },\n  {\n   \"id\": \"97845\",\n   \"name\": \"1.0\",\n   \"description\": \"Version 1.0\",\n   \"isArchived\": true,\n   \"isReleased\": false\n  }\n ],\n \"customFields\": [\n  {\n   \"id\": 28,\n   \"name\": \"Toogle Custom Field\",\n   \"value\": \"true\"\n  },\n  {\n   \"id\": 28,\n   \"name\": \"Toogle Custom Field\",\n   \"value\": \"true\"\n  }\n ],\n \"steps\": [\n  {\n   \"id\": 85778,\n   \"index\": 1,\n   \"fields\": \"exercitation laboris qui\",\n   \"attachments\": [\n    {\n     \"id\": -86303914,\n     \"filename\": \"sit anim elit est\",\n     \"fileIcon\": \"id\",\n     \"mimeType\": \"consectetur dolor quis\",\n     \"fileIconAlt\": \"nulla proident velit\",\n     \"fileSize\": \"eiusmod c\",\n     \"numericalFileSize\": -11357653,\n     \"created\": \"non reprehenderit ut\",\n     \"createdDate\": -45746300,\n     \"author\": \"incididunt ad\",\n     \"authorFullName\": \"eu ex\",\n     \"fileURL\": \"in sunt est laborum\",\n     \"filePath\": \"dolore sed Ut\"\n    },\n    {\n     \"id\": 25006787,\n     \"filename\": \"cupidatat dolor\",\n     \"fileIcon\": \"consectetur laboris\",\n     \"mimeType\": \"aliquip in reprehenderit culp\",\n     \"fileIconAlt\": \"cillum proident voluptate\",\n     \"fileSize\": \"tempor irure\",\n     \"numericalFileSize\": 47874816,\n     \"created\": \"in\",\n     \"createdDate\": -69533625,\n     \"author\": \"culpa proident voluptate nulla dolore\",\n     \"authorFullName\": \"eu Excepteur dolore\",\n     \"fileURL\": \"fugiat Duis enim minim\",\n     \"filePath\": \"irure\"\n    }\n   ],\n   \"status\": \"PASS\",\n   \"comment\": {\n    \"rendered\": \"Comment on step\"\n   },\n   \"defects\": [\n    \"CALC-123\",\n    \"CALC-765\"\n   ],\n   \"evidences\": [\n    {\n     \"id\": -84742047,\n     \"filename\": \"incididunt elit proiden\",\n     \"fileIcon\": \"voluptate nisi minim\",\n     \"mimeType\": \"sed laboris\",\n     \"fileIconAlt\": \"tempor non et magna sunt\",\n     \"fileSize\": \"dolore nisi\",\n     \"numericalFileSize\": -49730563,\n     \"created\": \"Duis sint\",\n     \"createdDate\": -41055574,\n     \"author\": \"in\",\n     \"authorFullName\": \"nisi mollit minim\",\n     \"fileURL\": \"in in ex dolore\",\n     \"filePath\": \"sed ut qui ullamco ipsum\"\n    },\n    {\n     \"id\": -6315286,\n     \"filename\": \"in eu elit aliqua\",\n     \"fileIcon\": \"enim\",\n     \"mimeType\": \"incididunt\",\n     \"fileIconAlt\": \"nostrud\",\n     \"fileSize\": \"officia dolor\",\n     \"numericalFileSize\": -59681487,\n     \"created\": \"sit et\",\n     \"createdDate\": -45373125,\n     \"author\": \"nulla est Lorem eu\",\n     \"authorFullName\": \"occaecat esse \",\n     \"fileURL\": \"veniam ut\",\n     \"filePath\": \"est Lorem\"\n    }\n   ],\n   \"actualResult\": {\n    \"rendered\": \"Actual result on step\"\n   }\n  },\n  {\n   \"id\": 85778,\n   \"index\": 1,\n   \"fields\": \"reprehenderit est pariatur sit\",\n   \"attachments\": [\n    {\n     \"id\": -83754441,\n     \"filename\": \"nostrud velit eu enim\",\n     \"fileIcon\": \"non ad a\",\n     \"mimeType\": \"pariatur culpa\",\n     \"fileIconAlt\": \"et enim\",\n     \"fileSize\": \"proi\",\n     \"numericalFileSize\": -61621919,\n     \"created\": \"nulla ipsum\",\n     \"createdDate\": -5826090,\n     \"author\": \"ea est ut\",\n     \"authorFullName\": \"officia\",\n     \"fileURL\": \"labore elit\",\n     \"filePath\": \"commodo ut\"\n    },\n    {\n     \"id\": -67964136,\n     \"filename\": \"in do eiusmod\",\n     \"fileIcon\": \"ex eu\",\n     \"mimeType\": \"es\",\n     \"fileIconAlt\": \"sint adipisicing reprehenderit sed sunt\",\n     \"fileSize\": \"reprehenderit proident dolor cillum\",\n     \"numericalFileSize\": -67901728,\n     \"created\": \"minim dolor aliquip\",\n     \"createdDate\": -79082282,\n     \"author\": \"magna veniam elit\",\n     \"authorFullName\": \"pariatur enim in cillum\",\n     \"fileURL\": \"in magna irure\",\n     \"filePath\": \"enim fugiat laboris sunt reprehenderit\"\n    }\n   ],\n   \"status\": \"PASS\",\n   \"comment\": {\n    \"rendered\": \"Comment on step\"\n   },\n   \"defects\": [\n    \"CALC-123\",\n    \"CALC-765\"\n   ],\n   \"evidences\": [\n    {\n     \"id\": -31365342,\n     \"filename\": \"velit Lorem consectetur magna\",\n     \"fileIcon\": \"anim amet\",\n     \"mimeType\": \"\",\n     \"fileIconAlt\": \"do ad laborum\",\n     \"fileSize\": \"laborum\",\n     \"numericalFileSize\": -90143393,\n     \"created\": \"amet sint sit\",\n     \"createdDate\": -72461974,\n     \"author\": \"nostrud sint\",\n     \"authorFullName\": \"culpa magna exercitation ut\",\n     \"fileURL\": \"ea eiusmod enim\",\n     \"filePath\": \"velit in minim consequat Duis\"\n    },\n    {\n     \"id\": -73603312,\n     \"filename\": \"Duis ut nostrud in dolor\",\n     \"fileIcon\": \"tempor exercitation mollit\",\n     \"mimeType\": \"in consectetur incididunt ut\",\n     \"fileIconAlt\": \"laborum dolor\",\n     \"fileSize\": \"commodo fugiat\",\n     \"numericalFileSize\": -61316937,\n     \"created\": \"reprehenderit non nisi\",\n     \"createdDate\": -98838928,\n     \"author\": \"amet proident qui\",\n     \"authorFullName\": \"dolor cillum Duis\",\n     \"fileURL\": \"reprehenderit in adipisicing\",\n     \"filePath\": \"consequat tempor\"\n    }\n   ],\n   \"actualResult\": {\n    \"rendered\": \"Actual result on step\"\n   }\n  }\n ]\n}"
								},
								{
									"name": "Internal Server error",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/testrun?testExecIssueKey=<string>&testIssueKey=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"testrun"
											],
											"query": [
												{
													"key": "testExecIssueKey",
													"value": "<string>"
												},
												{
													"key": "testIssueKey",
													"value": "<string>"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"error\": \"Internal server exception cause.\"\n}"
								},
								{
									"name": "Bad Request",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/testrun?testExecIssueKey=<string>&testIssueKey=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"testrun"
											],
											"query": [
												{
													"key": "testExecIssueKey",
													"value": "<string>"
												},
												{
													"key": "testIssueKey",
													"value": "<string>"
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"error\": \"Test Run not found for Test Execution with key CALC-67 and Test issue with key CALC-67207.\"\n}"
								}
							]
						},
						{
							"name": "/testrun/:id",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c1981dd3-d758-476c-a8ce-e0ce00aaba24",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"data returned\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.not.be.empty;",
											"    pm.expect(jsonData.testKey).to.eq(pm.collectionVariables.get(\"T3_KEY\"));",
											"    pm.expect(jsonData.testExecKey).to.eq(pm.collectionVariables.get(\"TE1_KEY\"));",
											"    pm.expect(jsonData.status).to.eq(\"PASS\");",
											"    pm.collectionVariables.set(\"TR3_ID\",jsonData.id);",
											"",
											"",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{JIRA_BASEURL}}/rest/raven/2.0/api/testrun/:id",
									"host": [
										"{{JIRA_BASEURL}}"
									],
									"path": [
										"rest",
										"raven",
										"2.0",
										"api",
										"testrun",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "{{TR3_ID}}",
											"description": "(Required) The id of the Test Run"
										}
									]
								},
								"description": "Retrieves a Test Run given the Test Run id. <br/> The response will contain all information related to a Test Run, e.g., status, created and finish dates, step results, test environments, defects, Test Run Custom fields, and so on. <br/>"
							},
							"response": [
								{
									"name": "Bad Request",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/testrun/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"testrun",
												":id"
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"error\": \"Test Run with Id 1 was not found in the server.\"\n}"
								},
								{
									"name": "Internal Server Error",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/testrun/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"testrun",
												":id"
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Successful operation",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/testrun/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"testrun",
												":id"
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"id\": 1004725,\n \"status\": \"FAIL\",\n \"color\": \"#D45D52\",\n \"testKey\": \"CALC-67187\",\n \"testExecKey\": \"CALC-67193\",\n \"assignee\": \"admin\",\n \"executedBy\": \"admin\",\n \"startedOn\": \"2020-02-12T09:58:04Z\",\n \"finishedOn\": \"2020-02-12T10:58:04Z\",\n \"startedOnIso\": \"2020-02-12T09:58:04Z\",\n \"finishedOnIso\": \"2020-02-12T10:58:04Z\",\n \"duration\": 1923493000,\n \"defects\": [\n  \"CALC-1\",\n  \"CALC-2\"\n ],\n \"evidences\": [\n  {\n   \"id\": -75076579,\n   \"filename\": \"occaecat qui commodo\",\n   \"fileIcon\": \"fugiat adipisicing nulla dolore\",\n   \"mimeType\": \"sit eiusmod dolore officia\",\n   \"fileIconAlt\": \"ad\",\n   \"fileSize\": \"irure ea Excepteur amet\",\n   \"numericalFileSize\": -58377305,\n   \"created\": \"sit\",\n   \"createdDate\": 56167255,\n   \"author\": \"\",\n   \"authorFullName\": \"proident velit veniam dolor laboris\",\n   \"fileURL\": \"sed velit\",\n   \"filePath\": \"culpa ut sunt minim dolor\"\n  },\n  {\n   \"id\": -50781919,\n   \"filename\": \"ad nostrud proident\",\n   \"fileIcon\": \"eu magna Lorem\",\n   \"mimeType\": \"sed occaecat officia laborum\",\n   \"fileIconAlt\": \"ad officia irure consectetur\",\n   \"fileSize\": \"in\",\n   \"numericalFileSize\": 86988871,\n   \"created\": \"\",\n   \"createdDate\": 8734165,\n   \"author\": \"Lorem est\",\n   \"authorFullName\": \"quis mollit tempor sint sit\",\n   \"fileURL\": \"commodo officia non\",\n   \"filePath\": \"aliquip consectetur\"\n  }\n ],\n \"comment\": \"Test Run comment\",\n \"testEnvironments\": [\n  \"iOS\",\n  \"Android\"\n ],\n \"fixVersions\": [\n  {\n   \"id\": \"97845\",\n   \"name\": \"1.0\",\n   \"description\": \"Version 1.0\",\n   \"isArchived\": true,\n   \"isReleased\": false\n  },\n  {\n   \"id\": \"97845\",\n   \"name\": \"1.0\",\n   \"description\": \"Version 1.0\",\n   \"isArchived\": true,\n   \"isReleased\": false\n  }\n ],\n \"customFields\": [\n  {\n   \"id\": 28,\n   \"name\": \"Toogle Custom Field\",\n   \"value\": \"true\"\n  },\n  {\n   \"id\": 28,\n   \"name\": \"Toogle Custom Field\",\n   \"value\": \"true\"\n  }\n ],\n \"steps\": [\n  {\n   \"id\": 85778,\n   \"index\": 1,\n   \"fields\": \"anim elit Duis esse\",\n   \"attachments\": [\n    {\n     \"id\": 67586470,\n     \"filename\": \"dolore laboris\",\n     \"fileIcon\": \"et Lorem enim\",\n     \"mimeType\": \"consectetur sed labore\",\n     \"fileIconAlt\": \"fugiat irure\",\n     \"fileSize\": \"nulla\",\n     \"numericalFileSize\": -97440442,\n     \"created\": \"cillum laborum\",\n     \"createdDate\": 97121868,\n     \"author\": \"in non sit\",\n     \"authorFullName\": \"nulla eiusmod tempor mollit\",\n     \"fileURL\": \"dolo\",\n     \"filePath\": \"id incididunt pariatur\"\n    },\n    {\n     \"id\": 92049680,\n     \"filename\": \"voluptate exe\",\n     \"fileIcon\": \"ea reprehenderit anim sit\",\n     \"mimeType\": \"sit esse\",\n     \"fileIconAlt\": \"sunt magna minim \",\n     \"fileSize\": \"Excepteur reprehenderit commod\",\n     \"numericalFileSize\": -45874545,\n     \"created\": \"culpa commodo dolore qui\",\n     \"createdDate\": 72508680,\n     \"author\": \"ipsum id Ut\",\n     \"authorFullName\": \"ullamco sit in\",\n     \"fileURL\": \"Duis reprehenderi\",\n     \"filePath\": \"laborum ad tempor ut\"\n    }\n   ],\n   \"status\": \"PASS\",\n   \"comment\": {\n    \"rendered\": \"Comment on step\"\n   },\n   \"defects\": [\n    \"CALC-123\",\n    \"CALC-765\"\n   ],\n   \"evidences\": [\n    {\n     \"id\": -5436173,\n     \"filename\": \"dolore\",\n     \"fileIcon\": \"aliquip minim laboris\",\n     \"mimeType\": \"ulla\",\n     \"fileIconAlt\": \"a\",\n     \"fileSize\": \"si\",\n     \"numericalFileSize\": 10272065,\n     \"created\": \"ut nulla cupidatat Duis\",\n     \"createdDate\": 70597346,\n     \"author\": \"ullamco adipisicing Duis in\",\n     \"authorFullName\": \"magna labore voluptate nisi veniam\",\n     \"fileURL\": \"ullamco veniam irure magna\",\n     \"filePath\": \"laboris ipsum Lorem velit\"\n    },\n    {\n     \"id\": -22307923,\n     \"filename\": \"sint ea enim\",\n     \"fileIcon\": \"tempor laborum\",\n     \"mimeType\": \"exercitation\",\n     \"fileIconAlt\": \"laborum ad in laboris\",\n     \"fileSize\": \"quis tempor\",\n     \"numericalFileSize\": 49220558,\n     \"created\": \"ut irure Excepteur\",\n     \"createdDate\": 18621973,\n     \"author\": \"consectetur ut\",\n     \"authorFullName\": \"irure sit esse in\",\n     \"fileURL\": \"id\",\n     \"filePath\": \"tempor veniam no\"\n    }\n   ],\n   \"actualResult\": {\n    \"rendered\": \"Actual result on step\"\n   }\n  },\n  {\n   \"id\": 85778,\n   \"index\": 1,\n   \"fields\": \"amet proident occaecat ipsum id\",\n   \"attachments\": [\n    {\n     \"id\": -12166356,\n     \"filename\": \"in aute\",\n     \"fileIcon\": \"adipisicing\",\n     \"mimeType\": \"qui\",\n     \"fileIconAlt\": \"labore pariatur aliquip ut reprehenderit\",\n     \"fileSize\": \"dolor laboris\",\n     \"numericalFileSize\": 72223756,\n     \"created\": \"dolor tempor sed\",\n     \"createdDate\": -55833221,\n     \"author\": \"incididunt dolor\",\n     \"authorFullName\": \"sint\",\n     \"fileURL\": \"id commodo cupidatat fugiat anim\",\n     \"filePath\": \"pariatur sunt minim ullamco\"\n    },\n    {\n     \"id\": 50085337,\n     \"filename\": \"ad\",\n     \"fileIcon\": \"cupidatat Excepteur ut e\",\n     \"mimeType\": \"Duis voluptate\",\n     \"fileIconAlt\": \"ea non sed anim\",\n     \"fileSize\": \"l\",\n     \"numericalFileSize\": 71550124,\n     \"created\": \"proident aliquip pariatur\",\n     \"createdDate\": -25990,\n     \"author\": \"enim cillum ipsum sint elit\",\n     \"authorFullName\": \"Duis\",\n     \"fileURL\": \"et minim nisi commodo\",\n     \"filePath\": \"ullamco ex voluptate\"\n    }\n   ],\n   \"status\": \"PASS\",\n   \"comment\": {\n    \"rendered\": \"Comment on step\"\n   },\n   \"defects\": [\n    \"CALC-123\",\n    \"CALC-765\"\n   ],\n   \"evidences\": [\n    {\n     \"id\": -62795701,\n     \"filename\": \"exercitation aliquip reprehenderit nostrud\",\n     \"fileIcon\": \"voluptate tempor\",\n     \"mimeType\": \"ipsum Ut laboris\",\n     \"fileIconAlt\": \"est exercitation\",\n     \"fileSize\": \"dolore minim\",\n     \"numericalFileSize\": -60534841,\n     \"created\": \"sint a\",\n     \"createdDate\": -74260373,\n     \"author\": \"est laboris\",\n     \"authorFullName\": \"dolore est non\",\n     \"fileURL\": \"commodo culpa Ut laboris\",\n     \"filePath\": \"tempor elit sint do nulla\"\n    },\n    {\n     \"id\": -13614884,\n     \"filename\": \"laborum eiusmod exercitation adipisicing\",\n     \"fileIcon\": \"eiusmod irure ullamco\",\n     \"mimeType\": \"id voluptate qui dolor\",\n     \"fileIconAlt\": \"reprehenderit \",\n     \"fileSize\": \"incididunt\",\n     \"numericalFileSize\": 30139360,\n     \"created\": \"adipisicing nulla fugiat nostrud\",\n     \"createdDate\": 79239826,\n     \"author\": \"non Ut\",\n     \"authorFullName\": \"sunt magna Lorem\",\n     \"fileURL\": \"mollit laboris ut in\",\n     \"filePath\": \"mini\"\n    }\n   ],\n   \"actualResult\": {\n    \"rendered\": \"Actual result on step\"\n   }\n  }\n ]\n}"
								}
							]
						},
						{
							"name": "/testrun/:id",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3dcd084a-3ba7-4915-be43-3cd55bbbb70a",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"",
											"    pm.sendRequest({",
											"        url:  pm.variables.replaceIn(pm.request.url).toString(),",
											"        method: 'PUT',",
											"        header: {",
											"            'content-type': 'application/json'",
											"        },",
											"        body: {",
											"            mode: 'raw',",
											"            raw: JSON.stringify({ status: \"PASS\", comment: \"Successful execution\" })",
											"        }",
											"    }, function (err, res) {",
											"       ",
											"    });",
											"",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"status\": \"FAIL\",\n    \"comment\": \"failed\"\n}"
								},
								"url": {
									"raw": "{{JIRA_BASEURL}}/rest/raven/2.0/api/testrun/:id",
									"host": [
										"{{JIRA_BASEURL}}"
									],
									"path": [
										"rest",
										"raven",
										"2.0",
										"api",
										"testrun",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "{{TR3_ID}}",
											"description": "(Required) The id of the Test Run"
										}
									]
								},
								"description": "Update all the values of a Test Run.<br/> The user can update the values of the overall status, step results, assignee, test environments, add defects and evidences and so on. <br/> <br/> To update the value of a Test Run custom field, the id of the field must be provided as well as a valid value for that custom field type. <br/><br/> - **Toggle Fields** values should be _\"true\"_, _\"false\"_, _\"0\"_ or _\"1\"_ <br /><br /> - **Number Fields** values should be a string containing a number, e.g. _\"320\"_. Decimal Number are also accepted,for instance, \"320.5\". The decimal places are always separated by a _\".\"_  <br /> <br /> - **Single Select and Radio Button Fields** values should be a single string containing the option value, e.g. _\"Option A\"_. The value should be a valid option for that custom field. The values are not case sensitive. <br /><br /> - **Multiple Select Fields** values should be an array of the string of option values, e.g. _[\"Option A\", \"Option B\"]_. All the selected values should be valid for that custom field. The option values are not case sensitive. <br /><br /> - **Date Fields** should follow the ISO format _yyyy-MM-dd_, where _yyyy_ represents the year, _MM_ the month in year and _dd_ the day in the month. For instance, a valid value would be _\"2020-05-02\"_. <br /><br /> - **Date Time fields** should be in UTC following the ISO format _yyyy-MM-dd'T'HH:mm'Z'_. The date part follows the same date format, while _HH_ represents the hours (0-24), _mm_ the minutes in hour and _Z_ indicates the hour in UTC. For instance, a valid date time value would be _\"2020-05-02T10:30Z\"_. <br /><br />\nAn error will be returned when there are invalid custom field values.\nIt is also possible to delete a Test Run custom field value by providing a _null_ or empty value (e.g., _\"\"_ or _[]_). **It is not possible to delete a value of a required Test Run Custom Field value.** <br/> Also, **it is not possible to change the Test Run to a final status when there are required Test Run custom fields with empty values.**"
							},
							"response": [
								{
									"name": "Internal Server error",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"status\": \"PASS\",\n    \"comment\": \"Comment on Test Run\",\n    \"assignee\": \"admin\",\n    \"defects\": {\n        \"add\": [\n            \"CALC-1\",\n            \"CALC-2\"\n        ],\n        \"remove\": [\n            \"CALC-3\",\n            \"CALC-4\"\n        ]\n    },\n    \"evidences\": {\n        \"add\": [\n            {\n                \"data\": \"gsddfgdsfg...(base64)\",\n                \"filename\": \"example.txt\",\n                \"contentType\": \"plain/text\"\n            },\n            {\n                \"data\": \"gsddfgdsfg...(base64)\",\n                \"filename\": \"example.txt\",\n                \"contentType\": \"plain/text\"\n            }\n        ],\n        \"remove\": [\n            1235,\n            5674\n        ]\n    },\n    \"customFields\": [\n        {\n            \"id\": 28,\n            \"value\": \"true\"\n        },\n        {\n            \"id\": 28,\n            \"value\": \"true\"\n        }\n    ],\n    \"steps\": [\n        {\n            \"id\": 85778,\n            \"status\": \"FAIL\",\n            \"comment\": \"Comment on step\",\n            \"defects\": {\n                \"add\": [\n                    \"CALC-123\",\n                    \"CALC-765\"\n                ],\n                \"remove\": [\n                    \"CALC-563\",\n                    \"CALC-744\"\n                ]\n            },\n            \"evidences\": {\n                \"add\": [\n                    {\n                        \"data\": \"gsddfgdsfg...(base64)\",\n                        \"filename\": \"example.txt\",\n                        \"contentType\": \"plain/text\"\n                    },\n                    {\n                        \"data\": \"gsddfgdsfg...(base64)\",\n                        \"filename\": \"example.txt\",\n                        \"contentType\": \"plain/text\"\n                    }\n                ],\n                \"remove\": [\n                    \"CALC-124\",\n                    \"CALC- 657\"\n                ]\n            },\n            \"actualResult\": \"Actual result on step\"\n        },\n        {\n            \"id\": 85778,\n            \"status\": \"FAIL\",\n            \"comment\": \"Comment on step\",\n            \"defects\": {\n                \"add\": [\n                    \"CALC-123\",\n                    \"CALC-765\"\n                ],\n                \"remove\": [\n                    \"CALC-563\",\n                    \"CALC-744\"\n                ]\n            },\n            \"evidences\": {\n                \"add\": [\n                    {\n                        \"data\": \"gsddfgdsfg...(base64)\",\n                        \"filename\": \"example.txt\",\n                        \"contentType\": \"plain/text\"\n                    },\n                    {\n                        \"data\": \"gsddfgdsfg...(base64)\",\n                        \"filename\": \"example.txt\",\n                        \"contentType\": \"plain/text\"\n                    }\n                ],\n                \"remove\": [\n                    \"CALC-124\",\n                    \"CALC- 657\"\n                ]\n            },\n            \"actualResult\": \"Actual result on step\"\n        }\n    ],\n    \"examples\": {\n        \"id\": \"1379\",\n        \"rank\": 1,\n        \"values\": [\n            \"value1\",\n            \"value2\"\n        ],\n        \"status\": \"TODO\",\n        \"statusDescription\": \"Description of the status\",\n        \"duration\": \"12960\",\n        \"backgrounds\": [\n            {\n                \"id\": 1,\n                \"rank\": 1,\n                \"type\": \"type\",\n                \"keyword\": \"Example Keyword\",\n                \"name\": \"Example Name\",\n                \"duration\": \"14226\",\n                \"logError\": \"\",\n                \"status\": \"PASS\"\n            },\n            {\n                \"id\": 1,\n                \"rank\": 1,\n                \"type\": \"type\",\n                \"keyword\": \"Example Keyword\",\n                \"name\": \"Example Name\",\n                \"duration\": \"14226\",\n                \"logError\": \"\",\n                \"status\": \"PASS\"\n            }\n        ],\n        \"hooks\": [\n            {\n                \"id\": 1,\n                \"rank\": 1,\n                \"type\": \"type\",\n                \"keyword\": \"Example Keyword\",\n                \"name\": \"Example Name\",\n                \"duration\": \"14226\",\n                \"logError\": \"\",\n                \"status\": \"PASS\"\n            },\n            {\n                \"id\": 1,\n                \"rank\": 1,\n                \"type\": \"type\",\n                \"keyword\": \"Example Keyword\",\n                \"name\": \"Example Name\",\n                \"duration\": \"14226\",\n                \"logError\": \"\",\n                \"status\": \"PASS\"\n            }\n        ],\n        \"steps\": [\n            {\n                \"id\": 1,\n                \"rank\": 1,\n                \"type\": \"type\",\n                \"keyword\": \"Example Keyword\",\n                \"name\": \"Example Name\",\n                \"duration\": \"14226\",\n                \"logError\": \"\",\n                \"status\": \"PASS\"\n            },\n            {\n                \"id\": 1,\n                \"rank\": 1,\n                \"type\": \"type\",\n                \"keyword\": \"Example Keyword\",\n                \"name\": \"Example Name\",\n                \"duration\": \"14226\",\n                \"logError\": \"\",\n                \"status\": \"PASS\"\n            }\n        ]\n    }\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/testrun/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"testrun",
												":id"
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"error\": \"Internal server exception cause.\"\n}"
								},
								{
									"name": "Bad Request. Occurs when there is some error in the request, for instance, some custom field has an invalid value, or the user does not have permissions to execute the Test Run.",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"status\": \"PASS\",\n    \"comment\": \"Comment on Test Run\",\n    \"assignee\": \"admin\",\n    \"defects\": {\n        \"add\": [\n            \"CALC-1\",\n            \"CALC-2\"\n        ],\n        \"remove\": [\n            \"CALC-3\",\n            \"CALC-4\"\n        ]\n    },\n    \"evidences\": {\n        \"add\": [\n            {\n                \"data\": \"gsddfgdsfg...(base64)\",\n                \"filename\": \"example.txt\",\n                \"contentType\": \"plain/text\"\n            },\n            {\n                \"data\": \"gsddfgdsfg...(base64)\",\n                \"filename\": \"example.txt\",\n                \"contentType\": \"plain/text\"\n            }\n        ],\n        \"remove\": [\n            1235,\n            5674\n        ]\n    },\n    \"customFields\": [\n        {\n            \"id\": 28,\n            \"value\": \"true\"\n        },\n        {\n            \"id\": 28,\n            \"value\": \"true\"\n        }\n    ],\n    \"steps\": [\n        {\n            \"id\": 85778,\n            \"status\": \"FAIL\",\n            \"comment\": \"Comment on step\",\n            \"defects\": {\n                \"add\": [\n                    \"CALC-123\",\n                    \"CALC-765\"\n                ],\n                \"remove\": [\n                    \"CALC-563\",\n                    \"CALC-744\"\n                ]\n            },\n            \"evidences\": {\n                \"add\": [\n                    {\n                        \"data\": \"gsddfgdsfg...(base64)\",\n                        \"filename\": \"example.txt\",\n                        \"contentType\": \"plain/text\"\n                    },\n                    {\n                        \"data\": \"gsddfgdsfg...(base64)\",\n                        \"filename\": \"example.txt\",\n                        \"contentType\": \"plain/text\"\n                    }\n                ],\n                \"remove\": [\n                    \"CALC-124\",\n                    \"CALC- 657\"\n                ]\n            },\n            \"actualResult\": \"Actual result on step\"\n        },\n        {\n            \"id\": 85778,\n            \"status\": \"FAIL\",\n            \"comment\": \"Comment on step\",\n            \"defects\": {\n                \"add\": [\n                    \"CALC-123\",\n                    \"CALC-765\"\n                ],\n                \"remove\": [\n                    \"CALC-563\",\n                    \"CALC-744\"\n                ]\n            },\n            \"evidences\": {\n                \"add\": [\n                    {\n                        \"data\": \"gsddfgdsfg...(base64)\",\n                        \"filename\": \"example.txt\",\n                        \"contentType\": \"plain/text\"\n                    },\n                    {\n                        \"data\": \"gsddfgdsfg...(base64)\",\n                        \"filename\": \"example.txt\",\n                        \"contentType\": \"plain/text\"\n                    }\n                ],\n                \"remove\": [\n                    \"CALC-124\",\n                    \"CALC- 657\"\n                ]\n            },\n            \"actualResult\": \"Actual result on step\"\n        }\n    ],\n    \"examples\": {\n        \"id\": \"1379\",\n        \"rank\": 1,\n        \"values\": [\n            \"value1\",\n            \"value2\"\n        ],\n        \"status\": \"TODO\",\n        \"statusDescription\": \"Description of the status\",\n        \"duration\": \"12960\",\n        \"backgrounds\": [\n            {\n                \"id\": 1,\n                \"rank\": 1,\n                \"type\": \"type\",\n                \"keyword\": \"Example Keyword\",\n                \"name\": \"Example Name\",\n                \"duration\": \"14226\",\n                \"logError\": \"\",\n                \"status\": \"PASS\"\n            },\n            {\n                \"id\": 1,\n                \"rank\": 1,\n                \"type\": \"type\",\n                \"keyword\": \"Example Keyword\",\n                \"name\": \"Example Name\",\n                \"duration\": \"14226\",\n                \"logError\": \"\",\n                \"status\": \"PASS\"\n            }\n        ],\n        \"hooks\": [\n            {\n                \"id\": 1,\n                \"rank\": 1,\n                \"type\": \"type\",\n                \"keyword\": \"Example Keyword\",\n                \"name\": \"Example Name\",\n                \"duration\": \"14226\",\n                \"logError\": \"\",\n                \"status\": \"PASS\"\n            },\n            {\n                \"id\": 1,\n                \"rank\": 1,\n                \"type\": \"type\",\n                \"keyword\": \"Example Keyword\",\n                \"name\": \"Example Name\",\n                \"duration\": \"14226\",\n                \"logError\": \"\",\n                \"status\": \"PASS\"\n            }\n        ],\n        \"steps\": [\n            {\n                \"id\": 1,\n                \"rank\": 1,\n                \"type\": \"type\",\n                \"keyword\": \"Example Keyword\",\n                \"name\": \"Example Name\",\n                \"duration\": \"14226\",\n                \"logError\": \"\",\n                \"status\": \"PASS\"\n            },\n            {\n                \"id\": 1,\n                \"rank\": 1,\n                \"type\": \"type\",\n                \"keyword\": \"Example Keyword\",\n                \"name\": \"Example Name\",\n                \"duration\": \"14226\",\n                \"logError\": \"\",\n                \"status\": \"PASS\"\n            }\n        ]\n    }\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/testrun/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"testrun",
												":id"
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"error\": \"Test Run with Id 1 was not found in the server.\"\n}"
								},
								{
									"name": "Successful operation",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"status\": \"PASS\",\n    \"comment\": \"Comment on Test Run\",\n    \"assignee\": \"admin\",\n    \"defects\": {\n        \"add\": [\n            \"CALC-1\",\n            \"CALC-2\"\n        ],\n        \"remove\": [\n            \"CALC-3\",\n            \"CALC-4\"\n        ]\n    },\n    \"evidences\": {\n        \"add\": [\n            {\n                \"data\": \"gsddfgdsfg...(base64)\",\n                \"filename\": \"example.txt\",\n                \"contentType\": \"plain/text\"\n            },\n            {\n                \"data\": \"gsddfgdsfg...(base64)\",\n                \"filename\": \"example.txt\",\n                \"contentType\": \"plain/text\"\n            }\n        ],\n        \"remove\": [\n            1235,\n            5674\n        ]\n    },\n    \"customFields\": [\n        {\n            \"id\": 28,\n            \"value\": \"true\"\n        },\n        {\n            \"id\": 28,\n            \"value\": \"true\"\n        }\n    ],\n    \"steps\": [\n        {\n            \"id\": 85778,\n            \"status\": \"FAIL\",\n            \"comment\": \"Comment on step\",\n            \"defects\": {\n                \"add\": [\n                    \"CALC-123\",\n                    \"CALC-765\"\n                ],\n                \"remove\": [\n                    \"CALC-563\",\n                    \"CALC-744\"\n                ]\n            },\n            \"evidences\": {\n                \"add\": [\n                    {\n                        \"data\": \"gsddfgdsfg...(base64)\",\n                        \"filename\": \"example.txt\",\n                        \"contentType\": \"plain/text\"\n                    },\n                    {\n                        \"data\": \"gsddfgdsfg...(base64)\",\n                        \"filename\": \"example.txt\",\n                        \"contentType\": \"plain/text\"\n                    }\n                ],\n                \"remove\": [\n                    \"CALC-124\",\n                    \"CALC- 657\"\n                ]\n            },\n            \"actualResult\": \"Actual result on step\"\n        },\n        {\n            \"id\": 85778,\n            \"status\": \"FAIL\",\n            \"comment\": \"Comment on step\",\n            \"defects\": {\n                \"add\": [\n                    \"CALC-123\",\n                    \"CALC-765\"\n                ],\n                \"remove\": [\n                    \"CALC-563\",\n                    \"CALC-744\"\n                ]\n            },\n            \"evidences\": {\n                \"add\": [\n                    {\n                        \"data\": \"gsddfgdsfg...(base64)\",\n                        \"filename\": \"example.txt\",\n                        \"contentType\": \"plain/text\"\n                    },\n                    {\n                        \"data\": \"gsddfgdsfg...(base64)\",\n                        \"filename\": \"example.txt\",\n                        \"contentType\": \"plain/text\"\n                    }\n                ],\n                \"remove\": [\n                    \"CALC-124\",\n                    \"CALC- 657\"\n                ]\n            },\n            \"actualResult\": \"Actual result on step\"\n        }\n    ],\n    \"examples\": {\n        \"id\": \"1379\",\n        \"rank\": 1,\n        \"values\": [\n            \"value1\",\n            \"value2\"\n        ],\n        \"status\": \"TODO\",\n        \"statusDescription\": \"Description of the status\",\n        \"duration\": \"12960\",\n        \"backgrounds\": [\n            {\n                \"id\": 1,\n                \"rank\": 1,\n                \"type\": \"type\",\n                \"keyword\": \"Example Keyword\",\n                \"name\": \"Example Name\",\n                \"duration\": \"14226\",\n                \"logError\": \"\",\n                \"status\": \"PASS\"\n            },\n            {\n                \"id\": 1,\n                \"rank\": 1,\n                \"type\": \"type\",\n                \"keyword\": \"Example Keyword\",\n                \"name\": \"Example Name\",\n                \"duration\": \"14226\",\n                \"logError\": \"\",\n                \"status\": \"PASS\"\n            }\n        ],\n        \"hooks\": [\n            {\n                \"id\": 1,\n                \"rank\": 1,\n                \"type\": \"type\",\n                \"keyword\": \"Example Keyword\",\n                \"name\": \"Example Name\",\n                \"duration\": \"14226\",\n                \"logError\": \"\",\n                \"status\": \"PASS\"\n            },\n            {\n                \"id\": 1,\n                \"rank\": 1,\n                \"type\": \"type\",\n                \"keyword\": \"Example Keyword\",\n                \"name\": \"Example Name\",\n                \"duration\": \"14226\",\n                \"logError\": \"\",\n                \"status\": \"PASS\"\n            }\n        ],\n        \"steps\": [\n            {\n                \"id\": 1,\n                \"rank\": 1,\n                \"type\": \"type\",\n                \"keyword\": \"Example Keyword\",\n                \"name\": \"Example Name\",\n                \"duration\": \"14226\",\n                \"logError\": \"\",\n                \"status\": \"PASS\"\n            },\n            {\n                \"id\": 1,\n                \"rank\": 1,\n                \"type\": \"type\",\n                \"keyword\": \"Example Keyword\",\n                \"name\": \"Example Name\",\n                \"duration\": \"14226\",\n                \"logError\": \"\",\n                \"status\": \"PASS\"\n            }\n        ]\n    }\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/testrun/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"testrun",
												":id"
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"id\": 1004725,\n \"evidenceIds\": [\n  35718310,\n  -89114109\n ],\n \"warnings\": [\n  \"ex in deserunt ipsum enim\",\n  \"minim tempor\"\n ],\n \"stepResults\": [\n  {\n   \"id\": 813743,\n   \"evidenceIds\": [\n    75276644,\n    83536899\n   ],\n   \"warnings\": [\n    \"ex veniam laborum\",\n    \"dolore nisi fugiat tempor\"\n   ]\n  },\n  {\n   \"id\": 813743,\n   \"evidenceIds\": [\n    68223102,\n    -42479297\n   ],\n   \"warnings\": [\n    \"fugiat ex et laborum\",\n    \"ullamco sunt\"\n   ]\n  }\n ]\n}"
								}
							]
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "status",
					"item": [
						{
							"name": "get test run status by id",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b588f636-44f4-438e-b903-769205c8bd8f",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"status returned\", function () {",
											"    var response = pm.response.text();",
											"    pm.expect(pm.response.text()).to.eq(\"PASS\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{JIRA_PASSWORD}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{JIRA_USERNAME}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{JIRA_BASEURL}}/rest/raven/2.0/api/testrun/{{TR3_ID}}/status",
									"host": [
										"{{JIRA_BASEURL}}"
									],
									"path": [
										"rest",
										"raven",
										"2.0",
										"api",
										"testrun",
										"{{TR3_ID}}",
										"status"
									]
								}
							},
							"response": []
						},
						{
							"name": "set test run status by id",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d2c1f588-738d-4c8e-ba36-630d44e558e7",
										"exec": [
											"pm.test(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{JIRA_PASSWORD}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{JIRA_USERNAME}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{JIRA_BASEURL}}/rest/raven/2.0/api/testrun/{{TR3_ID}}/status?status=FAIL",
									"host": [
										"{{JIRA_BASEURL}}"
									],
									"path": [
										"rest",
										"raven",
										"2.0",
										"api",
										"testrun",
										"{{TR3_ID}}",
										"status"
									],
									"query": [
										{
											"key": "status",
											"value": "FAIL"
										}
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "defects",
					"item": [
						{
							"name": "add/link defects to test run",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "eeee18e0-90b3-4d6e-89e9-5cd4a051acd1",
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{JIRA_PASSWORD}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{JIRA_USERNAME}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\n\t\"{{D1_KEY}}\"\n]",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{JIRA_BASEURL}}/rest/raven/2.0/api/testrun/{{TR1_ID}}/defect",
									"host": [
										"{{JIRA_BASEURL}}"
									],
									"path": [
										"rest",
										"raven",
										"2.0",
										"api",
										"testrun",
										"{{TR1_ID}}",
										"defect"
									]
								}
							},
							"response": []
						},
						{
							"name": "get test run defects",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "09c04a83-f967-49ad-9340-dc448e3c41f8",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"data returned\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.not.be.empty;",
											"    pm.expect(jsonData.length).to.be.above(0);",
											"    pm.expect(jsonData[0].key).to.eq(pm.collectionVariables.get(\"D1_KEY\"));",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{JIRA_PASSWORD}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{JIRA_USERNAME}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n   \"data\":\"ZHVtbXkgY29udGVudA==\",\n   \"filename\":\"dummy.txt\",\n   \"contentType\":\"text/plain\"\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{JIRA_BASEURL}}/rest/raven/2.0/api/testrun/{{TR1_ID}}/defect",
									"host": [
										"{{JIRA_BASEURL}}"
									],
									"path": [
										"rest",
										"raven",
										"2.0",
										"api",
										"testrun",
										"{{TR1_ID}}",
										"defect"
									]
								}
							},
							"response": []
						},
						{
							"name": "remove/unlink defects from test run",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "80340aeb-4e64-46cc-9dba-74bbe96ced48",
										"exec": [
											"pm.test(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{JIRA_PASSWORD}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{JIRA_USERNAME}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n   \"data\":\"ZHVtbXkgY29udGVudA==\",\n   \"filename\":\"dummy.txt\",\n   \"contentType\":\"text/plain\"\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{JIRA_BASEURL}}/rest/raven/2.0/api/testrun/{{TR1_ID}}/defect/{{D1_KEY}}",
									"host": [
										"{{JIRA_BASEURL}}"
									],
									"path": [
										"rest",
										"raven",
										"2.0",
										"api",
										"testrun",
										"{{TR1_ID}}",
										"defect",
										"{{D1_KEY}}"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "evidence",
					"item": [
						{
							"name": "add evidence/attachment(s) to the test run",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6193bceb-5c25-4b06-ac8b-3c03584dc87f",
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{JIRA_PASSWORD}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{JIRA_USERNAME}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n   \"data\":\"ZHVtbXkgY29udGVudA==\",\n   \"filename\":\"dummy.txt\",\n   \"contentType\":\"text/plain\"\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{JIRA_BASEURL}}/rest/raven/2.0/api/testrun/{{TR1_ID}}/attachment",
									"host": [
										"{{JIRA_BASEURL}}"
									],
									"path": [
										"rest",
										"raven",
										"2.0",
										"api",
										"testrun",
										"{{TR1_ID}}",
										"attachment"
									]
								}
							},
							"response": []
						},
						{
							"name": "get all evidence/attachment(s) linked to the test run",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7ff5807e-bca8-4689-a446-9eda8c685312",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"data returned\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.not.be.empty;",
											"    pm.expect(jsonData.length).to.be.above(0);",
											"    pm.collectionVariables.set(\"TR1_ATTACH1_ID\",jsonData[0].id);",
											"    pm.collectionVariables.set(\"TR1_ATTACH1_NAME\",jsonData[0].fileName);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{JIRA_PASSWORD}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{JIRA_USERNAME}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n   \"data\":\"ZHVtbXkgY29udGVudA==\",\n   \"filename\":\"dummy.txt\",\n   \"contentType\":\"text/plain\"\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{JIRA_BASEURL}}/rest/raven/2.0/api/testrun/{{TR1_ID}}/attachment",
									"host": [
										"{{JIRA_BASEURL}}"
									],
									"path": [
										"rest",
										"raven",
										"2.0",
										"api",
										"testrun",
										"{{TR1_ID}}",
										"attachment"
									]
								}
							},
							"response": []
						},
						{
							"name": "delete evidence/attachment by id",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fd157d74-118f-418e-ab98-cc9105fd75aa",
										"exec": [
											"pm.test(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{JIRA_PASSWORD}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{JIRA_USERNAME}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n   \"data\":\"ZHVtbXkgY29udGVudA==\",\n   \"filename\":\"dummy.txt\",\n   \"contentType\":\"text/plain\"\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{JIRA_BASEURL}}/rest/raven/2.0/api/testrun/{{TR1_ID}}/attachment/{{TR1_ATTACH1_ID}}",
									"host": [
										"{{JIRA_BASEURL}}"
									],
									"path": [
										"rest",
										"raven",
										"2.0",
										"api",
										"testrun",
										"{{TR1_ID}}",
										"attachment",
										"{{TR1_ATTACH1_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "delete evidence/attachment by name",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3c4d04f9-fbe2-4c1b-b5fc-04dd3f677ca1",
										"exec": [
											"pm.test(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{JIRA_PASSWORD}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{JIRA_USERNAME}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "dummy.txt",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{JIRA_BASEURL}}/rest/raven/2.0/api/testrun/{{TR1_ID}}/attachment",
									"host": [
										"{{JIRA_BASEURL}}"
									],
									"path": [
										"rest",
										"raven",
										"2.0",
										"api",
										"testrun",
										"{{TR1_ID}}",
										"attachment"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "1f759a13-381d-4c8f-b4b9-adaecbb91921",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "960e600e-5b71-49cb-8bb7-fca47f8e9454",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "comment",
					"item": [
						{
							"name": "get test run comment by id",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "66c94c30-6149-4e00-9f86-8121980bdc18",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"status returned\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.not.be.empty;",
											"    pm.expect(jsonData.raw).to.eq(\"Successful execution\");",
											"    pm.expect(jsonData.rendered).to.eq(\"<p>Successful execution</p>\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{JIRA_PASSWORD}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{JIRA_USERNAME}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{JIRA_BASEURL}}/rest/raven/2.0/api/testrun/{{TR3_ID}}/comment",
									"host": [
										"{{JIRA_BASEURL}}"
									],
									"path": [
										"rest",
										"raven",
										"2.0",
										"api",
										"testrun",
										"{{TR3_ID}}",
										"comment"
									]
								}
							},
							"response": []
						},
						{
							"name": "set test run comment by id",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "08f8d692-aa45-4827-ba0b-b47dda126a7c",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"status returned\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.not.be.empty;",
											"    pm.expect(jsonData.raw).to.eq(\"My new comment\");",
											"    pm.expect(jsonData.rendered).to.eq(\"<p>My new comment</p>\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{JIRA_PASSWORD}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{JIRA_USERNAME}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "My new comment",
									"options": {
										"raw": {
											"language": "text"
										}
									}
								},
								"url": {
									"raw": "{{JIRA_BASEURL}}/rest/raven/2.0/api/testrun/{{TR3_ID}}/comment",
									"host": [
										"{{JIRA_BASEURL}}"
									],
									"path": [
										"rest",
										"raven",
										"2.0",
										"api",
										"testrun",
										"{{TR3_ID}}",
										"comment"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "assignee",
					"item": [
						{
							"name": "get test run assignee by id",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b17bac8e-5bf8-4919-b009-438663366fe6",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"status returned\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.not.be.empty;",
											"    pm.expect(jsonData.assigned).to.eq(true);",
											"    pm.expect(jsonData.assignee).to.eq(pm.variables.get(\"JIRA_USERNAME\"));",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{JIRA_PASSWORD}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{JIRA_USERNAME}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{JIRA_BASEURL}}/rest/raven/2.0/api/testrun/{{TR3_ID}}/assignee",
									"host": [
										"{{JIRA_BASEURL}}"
									],
									"path": [
										"rest",
										"raven",
										"2.0",
										"api",
										"testrun",
										"{{TR3_ID}}",
										"assignee"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "test step results",
					"item": [
						{
							"name": "overall",
							"item": [
								{
									"name": "get all test run' steps",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "dbc933ca-e92a-4b68-a9d7-517c141ad3b5",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"data returned\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData).to.not.be.empty;",
													"});",
													"",
													"pm.test(\"4 steps returned\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData).to.have.lengthOf(4);",
													"    pm.collectionVariables.set(\"TR1_STEP1_ID\",jsonData[0].id);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{JIRA_PASSWORD}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{JIRA_USERNAME}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{JIRA_BASEURL}}/rest/raven/2.0/api/testrun/{{TR1_ID}}/step",
											"host": [
												"{{JIRA_BASEURL}}"
											],
											"path": [
												"rest",
												"raven",
												"2.0",
												"api",
												"testrun",
												"{{TR1_ID}}",
												"step"
											],
											"query": [
												{
													"key": null,
													"value": "",
													"disabled": true
												}
											]
										},
										"description": "rever api endppoint doc"
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "details",
							"item": [
								{
									"name": "get test run' step details by id",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "0da6e903-ddc6-47a3-a328-50b2174aafc4",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"data returned\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData).to.not.be.empty;",
													"});",
													"",
													"pm.test(\"4 steps returned\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData).to.not.be.empty;",
													"    pm.expect(jsonData.id).to.eq(pm.collectionVariables.get(\"TR1_STEP1_ID\"));",
													"    pm.expect(jsonData.step.raw).to.eq(\"Step 1\");",
													"    pm.expect(jsonData.result.raw).to.eq(\"Excepted result 1\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{JIRA_PASSWORD}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{JIRA_USERNAME}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{JIRA_BASEURL}}/rest/raven/2.0/api/testrun/{{TR1_ID}}/step/{{TR1_STEP1_ID}}",
											"host": [
												"{{JIRA_BASEURL}}"
											],
											"path": [
												"rest",
												"raven",
												"2.0",
												"api",
												"testrun",
												"{{TR1_ID}}",
												"step",
												"{{TR1_STEP1_ID}}"
											],
											"query": [
												{
													"key": null,
													"value": "",
													"disabled": true
												}
											]
										},
										"description": "rever api endppoint doc"
									},
									"response": []
								},
								{
									"name": "set test run' step details by id",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "1849dc11-fb76-4732-9a09-277cd9636b63",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{JIRA_PASSWORD}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{JIRA_USERNAME}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n   \"id\":\"{{TR1_STEP1_ID}}\",\n   \"status\":\"PASS\",\n   \"comment\":\"The comment\",\n   \"evidences\":[\n      {\n\t   \"data\":\"ZHVtbXkgY29udGVudA==\",\n\t   \"filename\":\"dummy.txt\",\n\t   \"contentType\":\"text/plain\"\n      }\n   ],\n   \"actualResult\":\"The actual result\"\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{JIRA_BASEURL}}/rest/raven/2.0/api/testrun/{{TR1_ID}}/step/{{TR1_STEP1_ID}}",
											"host": [
												"{{JIRA_BASEURL}}"
											],
											"path": [
												"rest",
												"raven",
												"2.0",
												"api",
												"testrun",
												"{{TR1_ID}}",
												"step",
												"{{TR1_STEP1_ID}}"
											],
											"query": [
												{
													"key": null,
													"value": "",
													"disabled": true
												}
											]
										},
										"description": "rever api endppoint doc"
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "status",
							"item": [
								{
									"name": "get test run' step status by id",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "bd581468-fc88-4776-9976-fa5702a63b67",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"status returned\", function () {",
													"    var response = pm.response.text();",
													"    pm.expect(pm.response.text()).to.eq(\"PASS\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{JIRA_PASSWORD}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{JIRA_USERNAME}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{JIRA_BASEURL}}/rest/raven/2.0/api/testrun/{{TR1_ID}}/step/{{TR1_STEP1_ID}}/status",
											"host": [
												"{{JIRA_BASEURL}}"
											],
											"path": [
												"rest",
												"raven",
												"2.0",
												"api",
												"testrun",
												"{{TR1_ID}}",
												"step",
												"{{TR1_STEP1_ID}}",
												"status"
											]
										}
									},
									"response": []
								},
								{
									"name": "set test run' step status by id",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "15e58c14-670b-477c-a4b7-9720be4dbab8",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{JIRA_PASSWORD}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{JIRA_USERNAME}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{JIRA_BASEURL}}/rest/raven/2.0/api/testrun/{{TR1_ID}}/step/{{TR1_STEP1_ID}}/status?status=FAIL",
											"host": [
												"{{JIRA_BASEURL}}"
											],
											"path": [
												"rest",
												"raven",
												"2.0",
												"api",
												"testrun",
												"{{TR1_ID}}",
												"step",
												"{{TR1_STEP1_ID}}",
												"status"
											],
											"query": [
												{
													"key": "status",
													"value": "FAIL"
												}
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "evidence",
					"item": [
						{
							"name": "add evidence/attachment(s) to the test run step",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6232d26a-4f78-45c1-b5d8-c308ac655323",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{JIRA_PASSWORD}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{JIRA_USERNAME}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n   \"data\":\"ZHVtbXkgY29udGVudA==\",\n   \"filename\":\"dummy.txt\",\n   \"contentType\":\"text/plain\"\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{JIRA_BASEURL}}/rest/raven/2.0/api/testrun/{{TR1_ID}}/step/{{TR1_STEP1_ID}}/attachment",
									"host": [
										"{{JIRA_BASEURL}}"
									],
									"path": [
										"rest",
										"raven",
										"2.0",
										"api",
										"testrun",
										"{{TR1_ID}}",
										"step",
										"{{TR1_STEP1_ID}}",
										"attachment"
									]
								}
							},
							"response": []
						},
						{
							"name": "get all evidence/attachment(s) linked to the test run step",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "85d98cf2-4ede-4a50-9cce-9a2478ebf27b",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"data returned\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.not.be.empty;",
											"    pm.expect(jsonData.length).to.be.above(0);",
											"    pm.collectionVariables.set(\"TR1_STEP1_ATTACH1_ID\",jsonData[0].id);",
											"    pm.collectionVariables.set(\"TR1_STEP1_ATTACH1_NAME\",jsonData[0].fileName);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{JIRA_PASSWORD}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{JIRA_USERNAME}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{JIRA_BASEURL}}/rest/raven/2.0/api/testrun/{{TR1_ID}}/step/{{TR1_STEP1_ID}}/attachment",
									"host": [
										"{{JIRA_BASEURL}}"
									],
									"path": [
										"rest",
										"raven",
										"2.0",
										"api",
										"testrun",
										"{{TR1_ID}}",
										"step",
										"{{TR1_STEP1_ID}}",
										"attachment"
									]
								}
							},
							"response": []
						},
						{
							"name": "delete evidence/attachment in test run step by id",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d7218927-0b40-455e-b9a3-b203c808e26d",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{JIRA_PASSWORD}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{JIRA_USERNAME}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{JIRA_BASEURL}}/rest/raven/2.0/api/testrun/{{TR1_ID}}/step/{{TR1_STEP1_ID}}/attachment/{{TR1_STEP1_ATTACH1_ID}}",
									"host": [
										"{{JIRA_BASEURL}}"
									],
									"path": [
										"rest",
										"raven",
										"2.0",
										"api",
										"testrun",
										"{{TR1_ID}}",
										"step",
										"{{TR1_STEP1_ID}}",
										"attachment",
										"{{TR1_STEP1_ATTACH1_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "delete evidence/attachment in test run step by name",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f31ad200-9b50-4005-9903-b55911c3b31d",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{JIRA_PASSWORD}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{JIRA_USERNAME}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "dummy.txt",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{JIRA_BASEURL}}/rest/raven/2.0/api/testrun/{{TR1_ID}}/step/{{TR1_STEP1_ID}}/attachment",
									"host": [
										"{{JIRA_BASEURL}}"
									],
									"path": [
										"rest",
										"raven",
										"2.0",
										"api",
										"testrun",
										"{{TR1_ID}}",
										"step",
										"{{TR1_STEP1_ID}}",
										"attachment"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "2f822b69-00c9-4247-9abd-fadfb3a8d512",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "9846979e-9454-4148-b29e-2106eba9aac4",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "cucumber/gherkin scenario outline examples",
					"item": [
						{
							"name": "get outline example details, by index",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e7c40f00-78a7-44d6-8d76-b5f2ace2f34c",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"data returned\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.not.be.empty;",
											"});",
											"",
											"pm.test(\"example returned\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.rank).to.eq(1)",
											"    pm.expect(jsonData.status).to.eq(\"TODO\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{JIRA_PASSWORD}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{JIRA_USERNAME}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{JIRA_BASEURL}}/rest/raven/2.0/api/testrun/{{TR2_ID}}/example/0",
									"host": [
										"{{JIRA_BASEURL}}"
									],
									"path": [
										"rest",
										"raven",
										"2.0",
										"api",
										"testrun",
										"{{TR2_ID}}",
										"example",
										"0"
									],
									"query": [
										{
											"key": null,
											"value": "",
											"disabled": true
										}
									]
								},
								"description": "rever api endppoint doc"
							},
							"response": []
						},
						{
							"name": "update outline example details, by index",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "01ee345e-ecf0-4d8b-b154-9a38e99069e2",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{JIRA_PASSWORD}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{JIRA_USERNAME}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{JIRA_BASEURL}}/rest/raven/2.0/api/testrun/{{TR2_ID}}/example/0?status=PASS",
									"host": [
										"{{JIRA_BASEURL}}"
									],
									"path": [
										"rest",
										"raven",
										"2.0",
										"api",
										"testrun",
										"{{TR2_ID}}",
										"example",
										"0"
									],
									"query": [
										{
											"key": "status",
											"value": "PASS"
										}
									]
								},
								"description": "rever api endppoint doc"
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "custom fields",
					"item": [
						{
							"name": "/testrun/:id/customfield/:customFieldId",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{JIRA_BASEURL}}/rest/raven/2.0/api/testrun/:id/customfield/:customFieldId",
									"host": [
										"{{JIRA_BASEURL}}"
									],
									"path": [
										"rest",
										"raven",
										"2.0",
										"api",
										"testrun",
										":id",
										"customfield",
										":customFieldId"
									],
									"variable": [
										{
											"key": "id",
											"value": "{{TR3_ID}}",
											"description": "(Required) The id of the Test Run"
										},
										{
											"key": "customFieldId",
											"value": "<string>",
											"description": "(Required) The id of the Test Run Custom Field"
										}
									]
								},
								"description": "Retrieves a Test Run Custom Field, given the Test Run and the Test Run Custom Field ids."
							},
							"response": [
								{
									"name": "Internal Server Error",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/testrun/:id/customfield/:customFieldId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"testrun",
												":id",
												"customfield",
												":customFieldId"
											],
											"variable": [
												{
													"key": "id"
												},
												{
													"key": "customFieldId"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Successful operation. Returns the value of the custom field for the given Test Run.",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/testrun/:id/customfield/:customFieldId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"testrun",
												":id",
												"customfield",
												":customFieldId"
											],
											"variable": [
												{
													"key": "id"
												},
												{
													"key": "customFieldId"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "\"true\""
								},
								{
									"name": "Bad Request",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/testrun/:id/customfield/:customFieldId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"testrun",
												":id",
												"customfield",
												":customFieldId"
											],
											"variable": [
												{
													"key": "id"
												},
												{
													"key": "customFieldId"
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"error\": \"Test Run Custom Field with id 2529 not found.\"\n}"
								}
							]
						},
						{
							"name": "/testrun/:id/customfield/:customFieldId",
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"value\": \"<string>\"\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{JIRA_BASEURL}}/rest/raven/2.0/api/testrun/:id/customfield/:customFieldId",
									"host": [
										"{{JIRA_BASEURL}}"
									],
									"path": [
										"rest",
										"raven",
										"2.0",
										"api",
										"testrun",
										":id",
										"customfield",
										":customFieldId"
									],
									"variable": [
										{
											"key": "id",
											"value": "{{TR3_ID}}",
											"description": "(Required) The id of the Test Run"
										},
										{
											"key": "customFieldId",
											"value": "<string>",
											"description": "(Required) The id of the Test Run Custom Field"
										}
									]
								},
								"description": "Updates the value of a test run custom field, given the Test Run and the Test Run Custom Field ids. The custom field value should be a valid value according to the field type. <br/><br/> - **Toggle Fields** values should be _\"true\"_, _\"false\"_, _\"0\"_ or _\"1\"_ <br /><br /> - **Number Fields** values should be a string containing a number, e.g. _\"320\"_. Decimal Number are also accepted,for instance, \"320.5\". The decimal places are always separated by a _\".\"_  <br /> <br /> - **Single Select and Radio Button Fields** values should be a single string containing the option value, e.g. _\"Option A\"_. The value should be a valid option for that custom field. The values are not case sensitive. <br /><br /> - **Multiple Select Fields** values should be an array of the string of option values, e.g. _[\"Option A\", \"Option B\"]_. All the selected values should be valid for that custom field. The option values are not case sensitive. <br /><br /> - **Date Fields** should follow the ISO format _yyyy-MM-dd_, where _yyyy_ represents the year, _MM_ the month in year and _dd_ the day in the month. For instance, a valid value would be _\"2020-05-02\"_. <br /><br /> - **Date Time fields** should be in UTC following the ISO format _yyyy-MM-dd'T'HH:mm'Z'_. The date part follows the same date format, while _HH_ represents the hours (0-24), _mm_ the minutes in hour and _Z_ indicates the hour in UTC. For instance, a valid date time value would be _\"2020-05-02T10:30Z\"_. <br /><br />\nAn error will be returned when there are invalid custom field values.\nIt is also possible to delete a Test Run custom field value by providing a _null_ or empty value (e.g., _\"\"_ or _[]_). **It is not possible to delete a value of a required Test Run Custom Field value.** <br/>"
							},
							"response": [
								{
									"name": "Successful operation",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"value\": \"true\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/testrun/:id/customfield/:customFieldId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"testrun",
												":id",
												"customfield",
												":customFieldId"
											],
											"variable": [
												{
													"key": "id"
												},
												{
													"key": "customFieldId"
												}
											]
										}
									},
									"status": "No Content",
									"code": 204,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Bad Request",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"value\": \"true\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/testrun/:id/customfield/:customFieldId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"testrun",
												":id",
												"customfield",
												":customFieldId"
											],
											"variable": [
												{
													"key": "id"
												},
												{
													"key": "customFieldId"
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"error\": \"Test Run Custom Field with id 2529 not found.\"\n}"
								},
								{
									"name": "Internal Server Error",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"value\": \"true\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/testrun/:id/customfield/:customFieldId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"testrun",
												":id",
												"customfield",
												":customFieldId"
											],
											"variable": [
												{
													"key": "id"
												},
												{
													"key": "customFieldId"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "1724e0c6-9ec3-48f1-ab15-874c1765ad0f",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "63859079-149f-4ae8-92ec-b1bd2056d780",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "test plans",
			"item": [
				{
					"name": "associate test to a test plan",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "2193812c-563b-4a3c-a3ad-ec595deb5ab7",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"no data returned\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.be.empty;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{JIRA_PASSWORD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{JIRA_USERNAME}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"add\": [\n        \"{{T1_KEY}}\"\n        ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{JIRA_BASEURL}}/rest/raven/2.0/api/testplan/{{TP1_KEY}}/test",
							"host": [
								"{{JIRA_BASEURL}}"
							],
							"path": [
								"rest",
								"raven",
								"2.0",
								"api",
								"testplan",
								"{{TP1_KEY}}",
								"test"
							]
						}
					},
					"response": []
				},
				{
					"name": "get tests associated to test plan, along with their consolidated status",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "827a1941-1fee-4cc8-8c15-e3eb21c455b3",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Test Runs returned\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.not.be.empty;",
									"});",
									"",
									"pm.test(\"1 Test Run returned\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.lengthOf(1);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{JIRA_PASSWORD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{JIRA_USERNAME}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{JIRA_BASEURL}}/rest/raven/2.0/api/testplan/{{TP1_KEY}}/test",
							"host": [
								"{{JIRA_BASEURL}}"
							],
							"path": [
								"rest",
								"raven",
								"2.0",
								"api",
								"testplan",
								"{{TP1_KEY}}",
								"test"
							],
							"query": [
								{
									"key": null,
									"value": "",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "export test' test plans",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "3c4b70c1-bf2d-4570-9945-1c2b4f798ae0",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"data returned\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.not.be.empty;",
									"});",
									"",
									"pm.test(\"1 Test Plan returned\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.lengthOf(1);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{JIRA_PASSWORD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{JIRA_USERNAME}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{JIRA_BASEURL}}/rest/raven/2.0/api/test/{{T1_KEY}}/testplans",
							"host": [
								"{{JIRA_BASEURL}}"
							],
							"path": [
								"rest",
								"raven",
								"2.0",
								"api",
								"test",
								"{{T1_KEY}}",
								"testplans"
							],
							"query": [
								{
									"key": null,
									"value": "",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "disassociate test from a test plan",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9690ce2c-f950-499f-a16f-b99324119758",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"no data returned\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.be.empty;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{JIRA_PASSWORD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{JIRA_USERNAME}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"remove\": [\n        \"{{T1_KEY}}\"\n        ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{JIRA_BASEURL}}/rest/raven/2.0/api/testplan/{{TP1_KEY}}/test",
							"host": [
								"{{JIRA_BASEURL}}"
							],
							"path": [
								"rest",
								"raven",
								"2.0",
								"api",
								"testplan",
								"{{TP1_KEY}}",
								"test"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "test repository",
			"item": [
				{
					"name": "hierarchy",
					"item": [
						{
							"name": "get all test repository's folder hierarchy",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c89b7fe9-569f-4626-9e63-378aea30b8a0",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"data returned\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.not.be.empty;",
											"    pm.expect(jsonData.folders).to.not.be.empty;",
											"    pm.expect(jsonData.allTestsCount).to.be.above(0);",
											"    pm.expect(jsonData.allOrphanTestsCount).to.be.above(0);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{JIRA_PASSWORD}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{JIRA_USERNAME}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{JIRA_BASEURL}}/rest/raven/2.0/api/testrepository/{{PROJECT_KEY}}/folders",
									"host": [
										"{{JIRA_BASEURL}}"
									],
									"path": [
										"rest",
										"raven",
										"2.0",
										"api",
										"testrepository",
										"{{PROJECT_KEY}}",
										"folders"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "folders",
					"item": [
						{
							"name": "get details of a test repository's folder by id",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "78a43f02-1fe9-464e-a210-943cfe36d6c1",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"data returned\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.not.be.empty;",
											"    pm.expect(jsonData.name).to.eq(pm.collectionVariables.get(\"F1_NAME\"));",
											"    pm.expect(jsonData.id).to.eq(pm.collectionVariables.get(\"F1_ID\"));",
											"    pm.expect(jsonData.testCount).to.be.above(0);",
											"    pm.expect(jsonData.totalTestCount).to.be.above(0);",
											"    pm.expect(jsonData.testRepositoryPath).to.eq(\"\");",
											"",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{JIRA_PASSWORD}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{JIRA_USERNAME}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{JIRA_BASEURL}}/rest/raven/2.0/api/testrepository/{{PROJECT_KEY}}/folders/{{F1_ID}}",
									"host": [
										"{{JIRA_BASEURL}}"
									],
									"path": [
										"rest",
										"raven",
										"2.0",
										"api",
										"testrepository",
										"{{PROJECT_KEY}}",
										"folders",
										"{{F1_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "create folder in Test Repository",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7e4fbb87-fd1b-44c5-a637-f5dab1fdc68d",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Folder created\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.id).not.eq(undefined);",
											"    pm.collectionVariables.set(\"F3_ID\", jsonData.id);",
											"    pm.collectionVariables.set(\"F3_PATH\", \"/\" + jsonData.name);",
											"    pm.collectionVariables.set(\"F3_NAME\", jsonData.name);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{JIRA_PASSWORD}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{JIRA_USERNAME}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"Postman 3\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{JIRA_BASEURL}}/rest/raven/2.0/api/testrepository/{{PROJECT_KEY}}/folders/{{F1_ID}}",
									"host": [
										"{{JIRA_BASEURL}}"
									],
									"path": [
										"rest",
										"raven",
										"2.0",
										"api",
										"testrepository",
										"{{PROJECT_KEY}}",
										"folders",
										"{{F1_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "update test repository's folder details by id",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2eb1188d-69b1-4ab8-b82c-76f6c46e217c",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{JIRA_PASSWORD}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{JIRA_USERNAME}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"Postman X\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{JIRA_BASEURL}}/rest/raven/2.0/api/testrepository/{{PROJECT_KEY}}/folders/{{F3_ID}}",
									"host": [
										"{{JIRA_BASEURL}}"
									],
									"path": [
										"rest",
										"raven",
										"2.0",
										"api",
										"testrepository",
										"{{PROJECT_KEY}}",
										"folders",
										"{{F3_ID}}"
									]
								},
								"description": "Notes:\n- the docs mention HTTP status code 204 in success but it returns 200\n-  depends on previous"
							},
							"response": []
						},
						{
							"name": "delete a test repository's folder by id",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f64f5987-23c2-4817-885e-82c11fb5f817",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{JIRA_PASSWORD}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{JIRA_USERNAME}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"Postman X\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{JIRA_BASEURL}}/rest/raven/2.0/api/testrepository/{{PROJECT_KEY}}/folders/{{F3_ID}}",
									"host": [
										"{{JIRA_BASEURL}}"
									],
									"path": [
										"rest",
										"raven",
										"2.0",
										"api",
										"testrepository",
										"{{PROJECT_KEY}}",
										"folders",
										"{{F3_ID}}"
									]
								},
								"description": "Notes:\n- the docs mention HTTP status code 204 in success but it returns 200\n-  depends on previous"
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "tests",
					"item": [
						{
							"name": "get tests within a specific folder in the test repository",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b5cf30b5-e316-4248-b575-851001481e40",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"data returned\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.not.be.empty;",
											"    pm.expect(jsonData.tests).to.not.be.empty;",
											"    pm.expect(jsonData.total).to.be.above(0);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{JIRA_PASSWORD}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{JIRA_USERNAME}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{JIRA_BASEURL}}/rest/raven/2.0/api/testrepository/{{PROJECT_KEY}}/folders/{{F1_ID}}/tests",
									"host": [
										"{{JIRA_BASEURL}}"
									],
									"path": [
										"rest",
										"raven",
										"2.0",
										"api",
										"testrepository",
										"{{PROJECT_KEY}}",
										"folders",
										"{{F1_ID}}",
										"tests"
									]
								}
							},
							"response": []
						},
						{
							"name": "add tests to a specific folder in the test repository",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "57646bb6-a665-4f17-82a3-8d575abc9e01",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{JIRA_PASSWORD}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{JIRA_USERNAME}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n \"add\": [\n    \"{{T4_KEY}}\"\n  ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{JIRA_BASEURL}}/rest/raven/2.0/api/testrepository/{{PROJECT_KEY}}/folders/{{F2_ID}}/tests",
									"host": [
										"{{JIRA_BASEURL}}"
									],
									"path": [
										"rest",
										"raven",
										"2.0",
										"api",
										"testrepository",
										"{{PROJECT_KEY}}",
										"folders",
										"{{F2_ID}}",
										"tests"
									]
								},
								"description": "Notes:\n- the docs mention HTTP status code 204 in success but it returns 200\n- not depends on previous"
							},
							"response": []
						},
						{
							"name": "remove tests from a specific folder in the test repository",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "602c20b7-ca3c-45ef-8ae9-cb9c887c0604",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{JIRA_PASSWORD}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{JIRA_USERNAME}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n \"remove\": [\n    \"{{T4_KEY}}\"\n  ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{JIRA_BASEURL}}/rest/raven/2.0/api/testrepository/{{PROJECT_KEY}}/folders/{{F2_ID}}/tests",
									"host": [
										"{{JIRA_BASEURL}}"
									],
									"path": [
										"rest",
										"raven",
										"2.0",
										"api",
										"testrepository",
										"{{PROJECT_KEY}}",
										"folders",
										"{{F2_ID}}",
										"tests"
									]
								},
								"description": "Notes:\n- the docs mention HTTP status code 204 in success but it returns 200\n- not depends on previous"
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "execution results",
			"item": [
				{
					"name": "import",
					"item": [
						{
							"name": "Xray JSON",
							"item": [
								{
									"name": "standard",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5d58a91d-0a60-40e8-8461-4cfa1c8f75ac",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Test Execution created\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.testExecIssue.key).to.not.be.empty;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{JIRA_PASSWORD}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{JIRA_USERNAME}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"info\" : {\n        \"summary\" : \"Execution of automated tests for release\",\n        \"description\" : \"This execution is automatically created when importing execution results from an external source\",\n        \"startDate\" : \"2020-05-30T11:37:00+01:00\",\n        \"finishDate\" : \"2020-05-30T11:50:00+01:00\"\n    },\n    \"tests\" : [\n        {\n            \"testKey\" : \"{{T1_KEY}}\",\n            \"start\" : \"2020-05-30T11:47:35+01:00\",\n            \"finish\" : \"2020-05-30T11:49:35+01:00\",\n            \"comment\" : \"Successful execution1\",\n            \"status\" : \"PASS\"\n        },\n        {\n            \"testKey\" : \"{{T2_KEY}}\",\n            \"start\" : \"2020-05-30T11:37:35+01:00\",\n            \"finish\" : \"2020-05-30T11:39:35+01:00\",\n            \"comment\" : \"Successful execution2\",\n            \"status\" : \"PASS\"\n        },\n        {\n            \"testKey\" : \"{{T3_KEY}}\",\n            \"start\" : \"2020-05-30T11:44:35+01:00\",\n            \"finish\" : \"2020-05-30T11:45:35+01:00\",\n            \"comment\" : \"Successful execution3\",\n            \"status\" : \"PASS\"\n        }\n ]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{JIRA_BASEURL}}/rest/raven/2.0/import/execution",
											"host": [
												"{{JIRA_BASEURL}}"
											],
											"path": [
												"rest",
												"raven",
												"2.0",
												"import",
												"execution"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Cucumber",
							"item": [
								{
									"name": "standard",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2dfca1aa-81e0-4f0f-b164-c7c1da1c7ddf",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Test Execution created\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.testExecIssue.key).to.not.be.empty;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{JIRA_PASSWORD}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{JIRA_USERNAME}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "[{\n    \"id\": \"as-a-user,-i-can-sum-two-numbers\",\n    \"uri\": \"features/sample_scenario_outline.feature\",\n    \"keyword\": \"Feature\",\n    \"name\": \"As a user, I can sum two numbers\",\n    \"description\": \"\",\n    \"line\": 2,\n    \"tags\": [{\n        \"name\": \"@REQ_{{S1_KEY}}\",\n        \"line\": 1\n    }],\n    \"elements\": [{\n        \"id\": \"as-a-user,-i-can-sum-two-numbers;;;2\",\n        \"keyword\": \"Scenario Outline\",\n        \"name\": \"\",\n        \"description\": \"\",\n        \"line\": 13,\n        \"type\": \"scenario\",\n        \"tags\": [{\n            \"name\": \"@REQ_{{S1_KEY}}\",\n            \"line\": 1\n        }, {\n            \"name\": \"@TEST_{{T2_KEY}}\",\n            \"line\": 4\n        }],\n        \"before\": [{\n            \"match\": {\n                \"location\": \"features/step_definitions/calculator_steps.rb:9\"\n            },\n            \"result\": {\n                \"status\": \"passed\",\n                \"duration\": 21000\n            }\n        }],\n        \"steps\": [{\n            \"keyword\": \"Given \",\n            \"name\": \"I have entered 20 into the calculator\",\n            \"line\": 6,\n            \"match\": {\n                \"location\": \"features/step_definitions/calculator_steps.rb:39\"\n            },\n            \"result\": {\n                \"status\": \"passed\",\n                \"duration\": 45000\n            }\n        }, {\n            \"keyword\": \"And \",\n            \"name\": \"I have entered 30 into the calculator\",\n            \"line\": 7,\n            \"match\": {\n                \"location\": \"features/step_definitions/calculator_steps.rb:39\"\n            },\n            \"result\": {\n                \"status\": \"passed\",\n                \"duration\": 11000\n            }\n        }, {\n            \"keyword\": \"When \",\n            \"name\": \"I press add\",\n            \"line\": 8,\n            \"match\": {\n                \"location\": \"features/step_definitions/calculator_steps.rb:43\"\n            },\n            \"result\": {\n                \"status\": \"passed\",\n                \"duration\": 17000\n            }\n        }, {\n            \"keyword\": \"Then \",\n            \"name\": \"the result should be 50 on the screen\",\n            \"line\": 9,\n            \"match\": {\n                \"location\": \"features/step_definitions/calculator_steps.rb:51\"\n            },\n            \"result\": {\n                \"status\": \"passed\",\n                \"duration\": 764000\n            }\n        }],\n        \"after\": [{\n            \"match\": {\n                \"location\": \"features/step_definitions/calculator_steps.rb:13\"\n            },\n            \"result\": {\n                \"status\": \"passed\",\n                \"duration\": 8000\n            }\n        }]\n    }, {\n        \"id\": \"as-a-user,-i-can-sum-two-numbers;;;3\",\n        \"keyword\": \"Scenario Outline\",\n        \"name\": \"\",\n        \"description\": \"\",\n        \"line\": 14,\n        \"type\": \"scenario\",\n        \"tags\": [{\n            \"name\": \"@REQ_{{S1_KEY}}\",\n            \"line\": 1\n        }, {\n            \"name\": \"@@TEST_{{T2_KEY}}\",\n            \"line\": 4\n        }],\n        \"before\": [{\n            \"match\": {\n                \"location\": \"features/step_definitions/calculator_steps.rb:9\"\n            },\n            \"result\": {\n                \"status\": \"passed\",\n                \"duration\": 8000\n            }\n        }],\n        \"steps\": [{\n            \"keyword\": \"Given \",\n            \"name\": \"I have entered 2 into the calculator\",\n            \"line\": 6,\n            \"match\": {\n                \"location\": \"features/step_definitions/calculator_steps.rb:39\"\n            },\n            \"result\": {\n                \"status\": \"passed\",\n                \"duration\": 14000\n            }\n        }, {\n            \"keyword\": \"And \",\n            \"name\": \"I have entered 5 into the calculator\",\n            \"line\": 7,\n            \"match\": {\n                \"location\": \"features/step_definitions/calculator_steps.rb:39\"\n            },\n            \"result\": {\n                \"status\": \"passed\",\n                \"duration\": 9000\n            }\n        }, {\n            \"keyword\": \"When \",\n            \"name\": \"I press add\",\n            \"line\": 8,\n            \"match\": {\n                \"location\": \"features/step_definitions/calculator_steps.rb:43\"\n            },\n            \"result\": {\n                \"status\": \"passed\",\n                \"duration\": 11000\n            }\n        }, {\n            \"keyword\": \"Then \",\n            \"name\": \"the result should be 7 on the screen\",\n            \"line\": 9,\n            \"match\": {\n                \"location\": \"features/step_definitions/calculator_steps.rb:51\"\n            },\n            \"result\": {\n                \"status\": \"passed\",\n                \"duration\": 19000\n            }\n        }],\n        \"after\": [{\n            \"match\": {\n                \"location\": \"features/step_definitions/calculator_steps.rb:13\"\n            },\n            \"result\": {\n                \"status\": \"passed\",\n                \"duration\": 6000\n            }\n        }]\n    }, {\n        \"id\": \"as-a-user,-i-can-sum-two-numbers;;;4\",\n        \"keyword\": \"Scenario Outline\",\n        \"name\": \"\",\n        \"description\": \"\",\n        \"line\": 15,\n        \"type\": \"scenario\",\n        \"tags\": [{\n            \"name\": \"@REQ_{{S1_KEY}}\",\n            \"line\": 1\n        }, {\n            \"name\": \"@TEST_{{T2_KEY}}\",\n            \"line\": 4\n        }],\n        \"before\": [{\n            \"match\": {\n                \"location\": \"features/step_definitions/calculator_steps.rb:9\"\n            },\n            \"result\": {\n                \"status\": \"passed\",\n                \"duration\": 8000\n            }\n        }],\n        \"steps\": [{\n            \"keyword\": \"Given \",\n            \"name\": \"I have entered 0 into the calculator\",\n            \"line\": 6,\n            \"match\": {\n                \"location\": \"features/step_definitions/calculator_steps.rb:39\"\n            },\n            \"result\": {\n                \"status\": \"passed\",\n                \"duration\": 14000\n            }\n        }, {\n            \"keyword\": \"And \",\n            \"name\": \"I have entered 40 into the calculator\",\n            \"line\": 7,\n            \"match\": {\n                \"location\": \"features/step_definitions/calculator_steps.rb:39\"\n            },\n            \"result\": {\n                \"status\": \"passed\",\n                \"duration\": 9000\n            }\n        }, {\n            \"keyword\": \"When \",\n            \"name\": \"I press add\",\n            \"line\": 8,\n            \"match\": {\n                \"location\": \"features/step_definitions/calculator_steps.rb:43\"\n            },\n            \"result\": {\n                \"status\": \"passed\",\n                \"duration\": 11000\n            }\n        }, {\n            \"keyword\": \"Then \",\n            \"name\": \"the result should be 40 on the screen\",\n            \"line\": 9,\n            \"match\": {\n                \"location\": \"features/step_definitions/calculator_steps.rb:51\"\n            },\n            \"result\": {\n                \"status\": \"passed\",\n                \"duration\": 17000\n            }\n        }],\n        \"after\": [{\n            \"match\": {\n                \"location\": \"features/step_definitions/calculator_steps.rb:13\"\n            },\n            \"result\": {\n                \"status\": \"passed\",\n                \"duration\": 6000\n            }\n        }]\n    }, {\n        \"id\": \"as-a-user,-i-can-sum-two-numbers;;;5\",\n        \"keyword\": \"Scenario Outline\",\n        \"name\": \"\",\n        \"description\": \"\",\n        \"line\": 16,\n        \"type\": \"scenario\",\n        \"tags\": [{\n            \"name\": \"@REQ_{{S1_KEY}}\",\n            \"line\": 1\n        }, {\n            \"name\": \"@TEST_{{T2_KEY}}\",\n            \"line\": 4\n        }],\n        \"before\": [{\n            \"match\": {\n                \"location\": \"features/step_definitions/calculator_steps.rb:9\"\n            },\n            \"result\": {\n                \"status\": \"passed\",\n                \"duration\": 7000\n            }\n        }],\n        \"steps\": [{\n            \"keyword\": \"Given \",\n            \"name\": \"I have entered 4 into the calculator\",\n            \"line\": 6,\n            \"match\": {\n                \"location\": \"features/step_definitions/calculator_steps.rb:39\"\n            },\n            \"result\": {\n                \"status\": \"passed\",\n                \"duration\": 14000\n            }\n        }, {\n            \"keyword\": \"And \",\n            \"name\": \"I have entered 50 into the calculator\",\n            \"line\": 7,\n            \"match\": {\n                \"location\": \"features/step_definitions/calculator_steps.rb:39\"\n            },\n            \"result\": {\n                \"status\": \"passed\",\n                \"duration\": 9000\n            }\n        }, {\n            \"keyword\": \"When \",\n            \"name\": \"I press add\",\n            \"line\": 8,\n            \"match\": {\n                \"location\": \"features/step_definitions/calculator_steps.rb:43\"\n            },\n            \"result\": {\n                \"status\": \"passed\",\n                \"duration\": 27000\n            }\n        }, {\n            \"keyword\": \"Then \",\n            \"name\": \"the result should be 54 on the screen\",\n            \"line\": 9,\n            \"match\": {\n                \"location\": \"features/step_definitions/calculator_steps.rb:51\"\n            },\n            \"result\": {\n                \"status\": \"passed\",\n                \"duration\": 17000\n            }\n        }],\n        \"after\": [{\n            \"match\": {\n                \"location\": \"features/step_definitions/calculator_steps.rb:13\"\n            },\n            \"result\": {\n                \"status\": \"passed\",\n                \"duration\": 6000\n            }\n        }]\n    }, {\n        \"id\": \"as-a-user,-i-can-sum-two-numbers;;;6\",\n        \"keyword\": \"Scenario Outline\",\n        \"name\": \"\",\n        \"description\": \"\",\n        \"line\": 17,\n        \"type\": \"scenario\",\n        \"tags\": [{\n            \"name\": \"@REQ_{{S1_KEY}}\",\n            \"line\": 1\n        }, {\n            \"name\": \"@{{T1_KEY}}\",\n            \"line\": 4\n        }],\n        \"before\": [{\n            \"match\": {\n                \"location\": \"features/step_definitions/calculator_steps.rb:9\"\n            },\n            \"result\": {\n                \"status\": \"passed\",\n                \"duration\": 8000\n            }\n        }],\n        \"steps\": [{\n            \"keyword\": \"Given \",\n            \"name\": \"I have entered 5 into the calculator\",\n            \"line\": 6,\n            \"match\": {\n                \"location\": \"features/step_definitions/calculator_steps.rb:39\"\n            },\n            \"result\": {\n                \"status\": \"passed\",\n                \"duration\": 14000\n            }\n        }, {\n            \"keyword\": \"And \",\n            \"name\": \"I have entered 50 into the calculator\",\n            \"line\": 7,\n            \"match\": {\n                \"location\": \"features/step_definitions/calculator_steps.rb:39\"\n            },\n            \"result\": {\n                \"status\": \"passed\",\n                \"duration\": 9000\n            }\n        }, {\n            \"keyword\": \"When \",\n            \"name\": \"I press add\",\n            \"line\": 8,\n            \"match\": {\n                \"location\": \"features/step_definitions/calculator_steps.rb:43\"\n            },\n            \"result\": {\n                \"status\": \"passed\",\n                \"duration\": 11000\n            }\n        }, {\n            \"keyword\": \"Then \",\n            \"name\": \"the result should be 55 on the screen\",\n            \"line\": 9,\n            \"match\": {\n                \"location\": \"features/step_definitions/calculator_steps.rb:51\"\n            },\n            \"result\": {\n                \"status\": \"passed\",\n                \"duration\": 18000\n            }\n        }],\n        \"after\": [{\n            \"match\": {\n                \"location\": \"features/step_definitions/calculator_steps.rb:13\"\n            },\n            \"result\": {\n                \"status\": \"passed\",\n                \"duration\": 6000\n            }\n        }]\n    }]\n}]",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{JIRA_BASEURL}}/rest/raven/2.0/import/execution/cucumber?projectKey={{PROJECT_KEY}}",
											"host": [
												"{{JIRA_BASEURL}}"
											],
											"path": [
												"rest",
												"raven",
												"2.0",
												"import",
												"execution",
												"cucumber"
											],
											"query": [
												{
													"key": "projectKey",
													"value": "{{PROJECT_KEY}}"
												}
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Behave",
							"item": [
								{
									"name": "standard",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f0714a2d-9dbf-4a6c-8bbc-9ed8674ff551",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Test Execution created\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.testExecIssue.key).to.not.be.empty;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{JIRA_PASSWORD}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{JIRA_USERNAME}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "[{\n        \"keyword\": \"Feature\",\n        \"name\": \"As a user, I can sum two numbers\",\n        \"tags\": [\"REQ_{{S1_KEY}}\"],\n        \"location\": \"features/sample_scenario_outline.feature:2\",\n        \"status\": \"failed\",\n        \"elements\": [{\n            \"type\": \"scenario\",\n            \"keyword\": \"Scenario Outline\",\n            \"name\": \" -- @1.1 \",\n            \"tags\": [\"TEST_{{T2_KEY}}\"],\n            \"location\": \"features/sample_scenario_outline.feature:13\",\n            \"steps\": [{\n                \"keyword\": \"Given\",\n                \"step_type\": \"given\",\n                \"name\": \"I have entered 20 into the calculator\",\n                \"location\": \"features/sample_scenario_outline.feature:6\",\n                \"result\": {\n                    \"status\": \"undefined\",\n                    \"duration\": 0\n                }\n            }, {\n                \"keyword\": \"And\",\n                \"step_type\": \"given\",\n                \"name\": \"I have entered 30 into the calculator\",\n                \"location\": \"features/sample_scenario_outline.feature:7\"\n            }, {\n                \"keyword\": \"When\",\n                \"step_type\": \"when\",\n                \"name\": \"I press add\",\n                \"location\": \"features/sample_scenario_outline.feature:8\"\n            }, {\n                \"keyword\": \"Then\",\n                \"step_type\": \"then\",\n                \"name\": \"the result should be 50 on the screen\",\n                \"location\": \"features/sample_scenario_outline.feature:9\"\n            }],\n            \"status\": \"failed\"\n        }, {\n            \"type\": \"scenario\",\n            \"keyword\": \"Scenario Outline\",\n            \"name\": \" -- @1.2 \",\n            \"tags\": [\"TEST_{{T2_KEY}}\"],\n            \"location\": \"features/sample_scenario_outline.feature:14\",\n            \"steps\": [{\n                \"keyword\": \"Given\",\n                \"step_type\": \"given\",\n                \"name\": \"I have entered 2 into the calculator\",\n                \"location\": \"features/sample_scenario_outline.feature:6\",\n                \"result\": {\n                    \"status\": \"undefined\",\n                    \"duration\": 0\n                }\n            }, {\n                \"keyword\": \"And\",\n                \"step_type\": \"given\",\n                \"name\": \"I have entered 5 into the calculator\",\n                \"location\": \"features/sample_scenario_outline.feature:7\"\n            }, {\n                \"keyword\": \"When\",\n                \"step_type\": \"when\",\n                \"name\": \"I press add\",\n                \"location\": \"features/sample_scenario_outline.feature:8\"\n            }, {\n                \"keyword\": \"Then\",\n                \"step_type\": \"then\",\n                \"name\": \"the result should be 7 on the screen\",\n                \"location\": \"features/sample_scenario_outline.feature:9\"\n            }],\n            \"status\": \"failed\"\n        }, {\n            \"type\": \"scenario\",\n            \"keyword\": \"Scenario Outline\",\n            \"name\": \" -- @1.3 \",\n            \"tags\": [\"TEST_{{T2_KEY}}\"],\n            \"location\": \"features/sample_scenario_outline.feature:15\",\n            \"steps\": [{\n                \"keyword\": \"Given\",\n                \"step_type\": \"given\",\n                \"name\": \"I have entered 0 into the calculator\",\n                \"location\": \"features/sample_scenario_outline.feature:6\",\n                \"result\": {\n                    \"status\": \"undefined\",\n                    \"duration\": 0\n                }\n            }, {\n                \"keyword\": \"And\",\n                \"step_type\": \"given\",\n                \"name\": \"I have entered 40 into the calculator\",\n                \"location\": \"features/sample_scenario_outline.feature:7\"\n            }, {\n                \"keyword\": \"When\",\n                \"step_type\": \"when\",\n                \"name\": \"I press add\",\n                \"location\": \"features/sample_scenario_outline.feature:8\"\n            }, {\n                \"keyword\": \"Then\",\n                \"step_type\": \"then\",\n                \"name\": \"the result should be 40 on the screen\",\n                \"location\": \"features/sample_scenario_outline.feature:9\"\n            }],\n            \"status\": \"failed\"\n        }, {\n            \"type\": \"scenario\",\n            \"keyword\": \"Scenario Outline\",\n            \"name\": \" -- @1.4 \",\n            \"tags\": [\"TEST_{{T2_KEY}}\"],\n            \"location\": \"features/sample_scenario_outline.feature:16\",\n            \"steps\": [{\n                \"keyword\": \"Given\",\n                \"step_type\": \"given\",\n                \"name\": \"I have entered 4 into the calculator\",\n                \"location\": \"features/sample_scenario_outline.feature:6\",\n                \"result\": {\n                    \"status\": \"undefined\",\n                    \"duration\": 0\n                }\n            }, {\n                \"keyword\": \"And\",\n                \"step_type\": \"given\",\n                \"name\": \"I have entered 50 into the calculator\",\n                \"location\": \"features/sample_scenario_outline.feature:7\"\n            }, {\n                \"keyword\": \"When\",\n                \"step_type\": \"when\",\n                \"name\": \"I press add\",\n                \"location\": \"features/sample_scenario_outline.feature:8\"\n            }, {\n                \"keyword\": \"Then\",\n                \"step_type\": \"then\",\n                \"name\": \"the result should be 54 on the screen\",\n                \"location\": \"features/sample_scenario_outline.feature:9\"\n            }],\n            \"status\": \"failed\"\n        }, {\n            \"type\": \"scenario\",\n            \"keyword\": \"Scenario Outline\",\n            \"name\": \" -- @1.5 \",\n            \"tags\": [\"TEST_{{T2_KEY}}\"],\n            \"location\": \"features/sample_scenario_outline.feature:17\",\n            \"steps\": [{\n                \"keyword\": \"Given\",\n                \"step_type\": \"given\",\n                \"name\": \"I have entered 5 into the calculator\",\n                \"location\": \"features/sample_scenario_outline.feature:6\",\n                \"result\": {\n                    \"status\": \"undefined\",\n                    \"duration\": 0\n                }\n            }, {\n                \"keyword\": \"And\",\n                \"step_type\": \"given\",\n                \"name\": \"I have entered 50 into the calculator\",\n                \"location\": \"features/sample_scenario_outline.feature:7\"\n            }, {\n                \"keyword\": \"When\",\n                \"step_type\": \"when\",\n                \"name\": \"I press add\",\n                \"location\": \"features/sample_scenario_outline.feature:8\"\n            }, {\n                \"keyword\": \"Then\",\n                \"step_type\": \"then\",\n                \"name\": \"the result should be 55 on the screen\",\n                \"location\": \"features/sample_scenario_outline.feature:9\"\n            }],\n            \"status\": \"failed\"\n        }]\n    }\n]\n    ",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{JIRA_BASEURL}}/rest/raven/2.0/import/execution/behave?projectKey={{PROJECT_KEY}}",
											"host": [
												"{{JIRA_BASEURL}}"
											],
											"path": [
												"rest",
												"raven",
												"2.0",
												"import",
												"execution",
												"behave"
											],
											"query": [
												{
													"key": "projectKey",
													"value": "{{PROJECT_KEY}}"
												}
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "JUnit",
							"item": [
								{
									"name": "standard",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "54bacc41-05e0-4266-a766-b74e3c314eb0",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Test Execution created\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.testExecIssue.key).to.not.be.empty;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{JIRA_PASSWORD}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{JIRA_USERNAME}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "file",
													"type": "file",
													"src": "/D:/XpandSTF/Sourcetree/xray-postman-collections/junit_sample.xml"
												}
											],
											"options": {
												"formdata": {}
											}
										},
										"url": {
											"raw": "{{JIRA_BASEURL}}/rest/raven/2.0/import/execution/junit?projectKey={{PROJECT_KEY}}",
											"host": [
												"{{JIRA_BASEURL}}"
											],
											"path": [
												"rest",
												"raven",
												"2.0",
												"import",
												"execution",
												"junit"
											],
											"query": [
												{
													"key": "projectKey",
													"value": "{{PROJECT_KEY}}"
												}
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "TestNG",
							"item": [
								{
									"name": "standard",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "dfccbd98-8163-448c-a026-4d04e797c025",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Test Execution created\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.testExecIssue.key).to.not.be.empty;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{JIRA_PASSWORD}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{JIRA_USERNAME}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "file",
													"type": "file",
													"src": "/D:/XpandSTF/Sourcetree/xray-postman-collections/testng_sample.xml"
												}
											],
											"options": {
												"formdata": {}
											}
										},
										"url": {
											"raw": "{{JIRA_BASEURL}}/rest/raven/2.0/import/execution/testng?projectKey={{PROJECT_KEY}}",
											"host": [
												"{{JIRA_BASEURL}}"
											],
											"path": [
												"rest",
												"raven",
												"2.0",
												"import",
												"execution",
												"testng"
											],
											"query": [
												{
													"key": "projectKey",
													"value": "{{PROJECT_KEY}}"
												}
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "NUnit",
							"item": [
								{
									"name": "standard",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "10e58986-251c-41ba-a569-f43855e56432",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Test Execution created\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.testExecIssue.key).to.not.be.empty;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{JIRA_PASSWORD}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{JIRA_USERNAME}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "file",
													"type": "file",
													"src": "/D:/XpandSTF/Sourcetree/xray-postman-collections/nunit_sample.xml"
												}
											],
											"options": {
												"formdata": {}
											}
										},
										"url": {
											"raw": "{{JIRA_BASEURL}}/rest/raven/2.0/import/execution/nunit?projectKey={{PROJECT_KEY}}",
											"host": [
												"{{JIRA_BASEURL}}"
											],
											"path": [
												"rest",
												"raven",
												"2.0",
												"import",
												"execution",
												"nunit"
											],
											"query": [
												{
													"key": "projectKey",
													"value": "{{PROJECT_KEY}}"
												}
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Robot Framework",
							"item": [
								{
									"name": "standard",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "61022029-65b6-41af-8a0e-7005c7c65ebe",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Test Execution created\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.testExecIssue.key).to.not.be.empty;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{JIRA_PASSWORD}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{JIRA_USERNAME}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "file",
													"type": "file",
													"src": "/D:/XpandSTF/Sourcetree/xray-postman-collections/robot_sample.xml"
												}
											],
											"options": {
												"formdata": {}
											}
										},
										"url": {
											"raw": "{{JIRA_BASEURL}}/rest/raven/2.0/import/execution/robot?projectKey={{PROJECT_KEY}}",
											"host": [
												"{{JIRA_BASEURL}}"
											],
											"path": [
												"rest",
												"raven",
												"2.0",
												"import",
												"execution",
												"robot"
											],
											"query": [
												{
													"key": "projectKey",
													"value": "{{PROJECT_KEY}}"
												}
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "multiple Cucumber",
							"item": [],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "export",
					"item": [
						{
							"name": "export test runs by Test Execution",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "eb273dec-6570-4eb8-b66a-7381b3da9d70",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"returns 3 test runs\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.have.lengthOf(3);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{JIRA_PASSWORD}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{JIRA_USERNAME}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{JIRA_BASEURL}}/rest/raven/2.0/testruns?testExecKey={{TE1_KEY}}",
									"host": [
										"{{JIRA_BASEURL}}"
									],
									"path": [
										"rest",
										"raven",
										"2.0",
										"testruns"
									],
									"query": [
										{
											"key": "testExecKey",
											"value": "{{TE1_KEY}}"
										}
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "fd1e58de-7775-415d-94af-eb8283921506",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "74c41675-888f-4e60-8fda-7061cbb4b54d",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "cucumber",
			"item": [
				{
					"name": "import cucumber tests (scenarios/scenario outlines and backgrounds)",
					"item": [
						{
							"name": "import cucumber tests and background from a .feature",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "abc33d9e-c529-4bc2-a93a-ef659b22f26a",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Test Execution created with 3 runs\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.testExecIssue.key).to.not.be.empty;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{JIRA_PASSWORD}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{JIRA_USERNAME}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"info\" : {\n        \"summary\" : \"Execution of automated tests for release\",\n        \"description\" : \"This execution is automatically created when importing execution results from an external source\",\n        \"startDate\" : \"2020-05-30T11:37:00+01:00\",\n        \"finishDate\" : \"2020-05-30T11:50:00+01:00\"\n    },\n    \"tests\" : [\n        {\n            \"testKey\" : \"{{T1_KEY}}\",\n            \"start\" : \"2020-05-30T11:47:35+01:00\",\n            \"finish\" : \"2020-05-30T11:49:35+01:00\",\n            \"comment\" : \"Successful execution1\",\n            \"status\" : \"PASS\"\n        },\n        {\n            \"testKey\" : \"{{T2_KEY}}\",\n            \"start\" : \"2020-05-30T11:37:35+01:00\",\n            \"finish\" : \"2020-05-30T11:39:35+01:00\",\n            \"comment\" : \"Successful execution2\",\n            \"status\" : \"PASS\"\n        },\n        {\n            \"testKey\" : \"{{T3_KEY}}\",\n            \"start\" : \"2020-05-30T11:44:35+01:00\",\n            \"finish\" : \"2020-05-30T11:45:35+01:00\",\n            \"comment\" : \"Successful execution3\",\n            \"status\" : \"PASS\"\n        }\n ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{JIRA_BASEURL}}/rest/raven/2.0/import/execution",
									"host": [
										"{{JIRA_BASEURL}}"
									],
									"path": [
										"rest",
										"raven",
										"2.0",
										"import",
										"execution"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "export cucumber tests",
					"item": [
						{
							"name": "export cucumber tests, as .feature",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "cfa17c8b-d2cf-45c8-beec-2d5d7a6b16cf",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"return a .feature file\", function () {",
											"    var response = pm.response;",
											"    pm.expect(response).to.not.be.empty;",
											"    pm.expect(response.text()).to.include(\"Scenario Outline: Sum of two numbers\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{JIRA_PASSWORD}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{JIRA_USERNAME}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{JIRA_BASEURL}}/rest/raven/2.0/export/test?keys={{T2_KEY}}&fz=false",
									"host": [
										"{{JIRA_BASEURL}}"
									],
									"path": [
										"rest",
										"raven",
										"2.0",
										"export",
										"test"
									],
									"query": [
										{
											"key": "keys",
											"value": "{{T2_KEY}}"
										},
										{
											"key": "fz",
											"value": "false"
										}
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "project settings",
			"item": [
				{
					"name": "custom fields",
					"item": [
						{
							"name": "/project/:id/settings/customfields/teststeps",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "55366cf7-8fdb-484b-97d8-c5ecac2ac42b",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Step CFs returned\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.have.lengthOf.at.least(3);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{JIRA_BASEURL}}/rest/raven/2.0/api/project/:id/settings/customfields/teststeps",
									"host": [
										"{{JIRA_BASEURL}}"
									],
									"path": [
										"rest",
										"raven",
										"2.0",
										"api",
										"project",
										":id",
										"settings",
										"customfields",
										"teststeps"
									],
									"variable": [
										{
											"key": "id",
											"value": "{{PROJECT_ID}}",
											"description": "(Required) The id of the Test Run"
										}
									]
								},
								"description": "Retrives the configuration of the Test Step custom fields for a project, given the project id. <br/><br/> The response contains all information related to the custom fields, such as id, name, description, if the field is require and enable. In the case of optional custom fields (Multiple and Single Select Fields and Radio Buttons), the list of the custom field options is also retrieved."
							},
							"response": [
								{
									"name": "Internal Server Error",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/project/:id/settings/customfields/teststeps",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"project",
												":id",
												"settings",
												"customfields",
												"teststeps"
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Successful operation",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/project/:id/settings/customfields/teststeps",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"project",
												":id",
												"settings",
												"customfields",
												"teststeps"
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "[\n {\n  \"id\": \"252922\",\n  \"name\": \"Toggle for Test Run\",\n  \"description\": \"A toggle custom field for the test runs\",\n  \"type\": \"TOGGLE\",\n  \"required\": false,\n  \"enabled\": true\n },\n {\n  \"id\": \"252922\",\n  \"name\": \"Toggle for Test Run\",\n  \"description\": \"A toggle custom field for the test runs\",\n  \"type\": \"TOGGLE\",\n  \"required\": false,\n  \"enabled\": true\n }\n]"
								},
								{
									"name": "Bad Request",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/project/:id/settings/customfields/teststeps",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"project",
												":id",
												"settings",
												"customfields",
												"teststeps"
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "\"Project with id 1749900 not found.\""
								}
							]
						},
						{
							"name": "/project/:id/settings/customfields/testruns",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "deb91db6-ce3b-48b1-86aa-1221abfd5795",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{JIRA_BASEURL}}/rest/raven/2.0/api/project/:id/settings/customfields/testruns",
									"host": [
										"{{JIRA_BASEURL}}"
									],
									"path": [
										"rest",
										"raven",
										"2.0",
										"api",
										"project",
										":id",
										"settings",
										"customfields",
										"testruns"
									],
									"variable": [
										{
											"key": "id",
											"value": "{{PROJECT_ID}}",
											"description": "(Required) The id of the Project"
										}
									]
								},
								"description": "Retrives the configuration of the Test Run custom fields for a project, given the project id. <br/><br/> The response contains all information related to the custom fields, such as id, name, description, if the field is require and enable, and the test types the custom field is associated with. In the case of optional custom fields (Multiple and Single Select Fields and Radio Buttons), the list of the custom field options is also retrieved."
							},
							"response": [
								{
									"name": "Internal Server Error",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/project/:id/settings/customfields/testruns",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"project",
												":id",
												"settings",
												"customfields",
												"testruns"
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Bad Request",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/project/:id/settings/customfields/testruns",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"project",
												":id",
												"settings",
												"customfields",
												"testruns"
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "\"Project with id 1749900 not found.\""
								},
								{
									"name": "Successful operation",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/project/:id/settings/customfields/testruns",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"project",
												":id",
												"settings",
												"customfields",
												"testruns"
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "[\n {\n  \"id\": \"252922\",\n  \"name\": \"Toggle for Test Run\",\n  \"description\": \"A toggle custom field for the test runs\",\n  \"type\": \"TOGGLE\",\n  \"required\": false,\n  \"enabled\": true,\n  \"testTypes\": [\n   \"Manual\",\n   \"Cucumber\"\n  ]\n },\n {\n  \"id\": \"252922\",\n  \"name\": \"Toggle for Test Run\",\n  \"description\": \"A toggle custom field for the test runs\",\n  \"type\": \"TOGGLE\",\n  \"required\": false,\n  \"enabled\": true,\n  \"testTypes\": [\n   \"Manual\",\n   \"Cucumber\"\n  ]\n }\n]"
								}
							]
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "global settings",
			"item": [
				{
					"name": "get possible test statuses from configuration",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "493b0287-22fa-49f8-9ed8-1fd81ea56a99",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"data returned\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.not.be.empty;",
									"});",
									"",
									"pm.test(\"several statuses returned\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.lengthOf.at.least(5);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{JIRA_PASSWORD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{JIRA_USERNAME}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{JIRA_BASEURL}}/rest/raven/2.0/api/settings/teststatuses",
							"host": [
								"{{JIRA_BASEURL}}"
							],
							"path": [
								"rest",
								"raven",
								"2.0",
								"api",
								"settings",
								"teststatuses"
							]
						}
					},
					"response": []
				},
				{
					"name": "get possible test step statuses from configuration",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b71794dd-92c7-497b-9ff0-b1d9bc3274ac",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"data returned\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.not.be.empty;",
									"});",
									"",
									"pm.test(\"several statuses returned\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.lengthOf.at.least(4);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{JIRA_PASSWORD}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{JIRA_USERNAME}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{JIRA_BASEURL}}/rest/raven/2.0/api/settings/teststepstatuses",
							"host": [
								"{{JIRA_BASEURL}}"
							],
							"path": [
								"rest",
								"raven",
								"2.0",
								"api",
								"settings",
								"teststepstatuses"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		}
	],
	"auth": {
		"type": "basic",
		"basic": [
			{
				"key": "password",
				"value": "{{JIRA_PASSWORD}}",
				"type": "string"
			},
			{
				"key": "username",
				"value": "{{JIRA_USERNAME}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "b011ba5a-2360-4fe3-b1da-93e7b25c6f28",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "0704fd12-9e43-45d2-997b-ab8766d3ad24",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"id": "7c4875bc-2e9b-402a-a146-8f303d3f5f89",
			"key": "TEST_ISSUETYPE_NAME",
			"value": "Test"
		},
		{
			"id": "bf5837d0-4d45-4683-8799-577d6f1a01ed",
			"key": "PRECONDITION_ISSUETYPE_NAME",
			"value": "Pre-Condition"
		},
		{
			"id": "d4cc91f6-1b27-455c-80cb-e241bdcd99a2",
			"key": "TESTSET_ISSUETYPE_NAME",
			"value": "Test Set"
		},
		{
			"id": "f354c882-097a-443d-8911-6edb7abef575",
			"key": "TESTEXECUTION_ISSUETYPE_NAME",
			"value": "Test Execution"
		},
		{
			"id": "38a28c2b-81ae-4ed0-9f9a-3aa9b82bd23f",
			"key": "TESTPLAN_ISSUETYPE_NAME",
			"value": "Test Plan"
		},
		{
			"id": "582f8356-3eea-453a-8fa6-973f3425cce7",
			"key": "CF_Test_Type",
			"value": "customfield_10100"
		},
		{
			"id": "6ffc8f77-b30d-4df6-a9e7-3e3eb8b5f391",
			"key": "CF_Precondition_Type",
			"value": "customfield_10121"
		},
		{
			"id": "9a60a8da-9cd0-47b1-ab4c-c452add2485a",
			"key": "CF_Cucumber_Scenario",
			"value": "customfield_10102"
		},
		{
			"id": "5e7130c3-c49b-4f48-a6f2-a84428fd3032",
			"key": "CF_Cucumber_Test_Type",
			"value": "customfield_10101"
		},
		{
			"id": "fb2d674a-3a8e-47f5-944c-f270fae213b7",
			"key": "CF_Manual_Test_Steps",
			"value": "customfield_10104"
		},
		{
			"id": "cc53752d-5de9-4ed0-8130-95f54809931e",
			"key": "CF_Generic_Definition",
			"value": "customfield_10103"
		},
		{
			"id": "3e970aa3-7bf9-4be4-be28-d917799c6e41",
			"key": "PROJECT_KEY",
			"value": "CALC"
		},
		{
			"id": "75240fb7-b92d-41cc-bb03-e0c561cb8955",
			"key": "CF_Test_Environments",
			"value": "customfield_10125"
		},
		{
			"id": "35a8297e-109f-4bac-8fce-d4d76afd7c10",
			"key": "BUG_ISSUETYPE_NAME",
			"value": "Bug"
		},
		{
			"id": "b16e9ad6-b596-4a67-ab3c-9ffd704ad408",
			"key": "STORY_ISSUETYPE_NAME",
			"value": "Story"
		},
		{
			"id": "13c3a1e9-fe0b-4ef6-9c3d-573a668b0b2d",
			"key": "CF_Test_Repository_Path",
			"value": "customfield_10111"
		},
		{
			"id": "1c11a8f6-10a1-4a3c-9a39-b8ed363f2838",
			"key": "XRAY_VERSION_MAJOR",
			"value": "4"
		},
		{
			"id": "3bcdf39b-0435-4f31-bf7b-a7306229d099",
			"key": "PROJECT_ID",
			"value": "10000"
		},
		{
			"id": "6b802e82-0732-4b3c-b861-8ce76b5cf1d2",
			"key": "F2_ID",
			"value": 38
		},
		{
			"id": "b7c1c707-0263-428f-af76-3cf21a7d4d57",
			"key": "F2_NAME",
			"value": "Postman F2 (9)"
		},
		{
			"id": "c5590ae4-9ac8-4532-b5bc-d42a2c10d758",
			"key": "F2_PATH",
			"value": "/Postman F2 (9)"
		}
	],
	"protocolProfileBehavior": {}
}